<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java学习</title>
      <link href="/archives/8df0ec14.html"/>
      <url>/archives/8df0ec14.html</url>
      
        <content type="html"><![CDATA[<h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h1><p>组件：</p><ul><li>窗口</li><li>弹窗</li><li>面板</li><li>文本框</li><li>列表框</li><li>按钮</li><li>图片</li><li>监听事件</li><li>鼠标</li><li>键盘事件</li></ul><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>GUI的核心技术：Swin、AWT</p><p>​    1、界面不美观</p><p>​    2、需要jre环境</p><p>为什么我们要学习？</p><p>​    1、了解MVC架构，了解监听</p><p>​    2、可以写出自己心中想要的小工具</p><p>​    3、工作时可能需要维护到swing界面，概率极小！</p><h2 id="2、AWT"><a href="#2、AWT" class="headerlink" title="2、AWT"></a>2、AWT</h2><h3 id="2-1、AWT介绍"><a href="#2-1、AWT介绍" class="headerlink" title="2.1、AWT介绍"></a>2.1、AWT介绍</h3><p>1、包含了很多的类和接口！</p><p>GUI(Graphical User Interface)：图形用户界面编程</p><p>2、元素：窗口，按钮，文本框</p><p>3、java.awt</p><p><img src="https://s6.jpg.cm/2022/09/22/Pbc41r.md.jpg" alt="awt"></p><h3 id="2-2、组件和容器"><a href="#2-2、组件和容器" class="headerlink" title="2.2、组件和容器"></a>2.2、组件和容器</h3><h4 id="1、Frame"><a href="#1、Frame" class="headerlink" title="1、Frame"></a>1、Frame</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GUI的第一个界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFrame_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Frame, JDK, 看源码！</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">"我的第一个Java图像界面窗口"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置窗口大小 width height</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置背景颜色 Color</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">75</span>, <span class="number">167</span>, <span class="number">182</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s6.jpg.cm/2022/09/22/Pbc0pR.md.jpg" alt="Frame"></p><p>问题：发现窗口关闭不掉，需要停止Java程序运行！</p><p>尝试回顾封装：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line">import java.awt.*;</span><br><span class="line"></span><br><span class="line">public class TestFrame_02 {</span><br><span class="line">    public static void main(String[] args) {</span><br><span class="line">        // 展示多个窗口 new</span><br><span class="line">        MyFrame myFrame1 = new MyFrame(100, 100, 200, 200, Color.blue);</span><br><span class="line">        MyFrame myFrame2 = new MyFrame(300, 100, 200, 200, Color.yellow);</span><br><span class="line">        MyFrame myFrame3 = new MyFrame(100, 300, 200, 200, Color.red);</span><br><span class="line">        MyFrame myFrame4 = new MyFrame(300, 300, 200, 200, Color.magenta);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class MyFrame extends Frame{</span><br><span class="line">    static int id = 0; // 可能存在多个窗口，需要一个计数器</span><br><span class="line"></span><br><span class="line">    public MyFrame(int x, int y, int w, int h, Color color){</span><br><span class="line">        super("Myframe"+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setVisible(true);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s6.jpg.cm/2022/09/23/PbbD7h.md.jpg" alt="回顾封装"></p><h4 id="2、面板Panel"><a href="#2、面板Panel" class="headerlink" title="2、面板Panel"></a>2、面板Panel</h4><p>解决了关闭事件！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Panel 可以看成一个空间，但不能单独出现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPanel_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="comment">// 布局的概念</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置布局</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 坐标</span></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">134</span>, <span class="number">134</span>, <span class="number">90</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// panel设置坐标，相对frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">217</span>, <span class="number">24</span>, <span class="number">24</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// frame.add(panel) Panel extends Container; Container extends Component</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监听事件，监听窗口关闭事件 System.exit(0)</span></span><br><span class="line">        <span class="comment">// 适配器模式：</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() {</span><br><span class="line">            <span class="comment">// 窗口点击关闭的时候要做的事情</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> {</span><br><span class="line">                <span class="comment">// 结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s1.ax1x.com/2022/09/23/xk2wpq.md.jpg" alt="面板Panel"></p><h4 id="3、布局管理器"><a href="#3、布局管理器" class="headerlink" title="3、布局管理器"></a>3、布局管理器</h4><ul><li><p>流式布局</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFlowLayout</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组件-按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"button1"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"button2"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"button3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置为流式布局</span></span><br><span class="line"><span class="comment">//        frame.setLayout(new FlowLayout());</span></span><br><span class="line"><span class="comment">//        frame.setLayout(new FlowLayout(FlowLayout.LEFT));</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.RIGHT));</span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把按钮添加上去</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> {</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>东西南北中</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBorderLayout</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">"TestBorderLayout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"East"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"West"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"South"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"North"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"Center"</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> {</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>表格布局Grid</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGridLayout</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">"TestGridLayout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn1"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn2"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn3"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn4"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn5"</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">btn6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"btn5"</span>);</span><br><span class="line"></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line"></span><br><span class="line">        frame.pack(); <span class="comment">// Java函数</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> {</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>Exercise</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.lesson01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 总</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">"ExerciseDemo"</span>);</span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">400</span>,<span class="number">400</span>,<span class="number">300</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setBackground(Color.BLACK);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 四个面板</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面</span></span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"East-1"</span>),BorderLayout.EAST);</span><br><span class="line">        p1.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"West-1"</span>),BorderLayout.WEST);</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"p2-btn-1"</span>));</span><br><span class="line">        p2.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"p2-btn-2"</span>));</span><br><span class="line">        p1.add(p2,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面</span></span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"East-2"</span>),BorderLayout.EAST);</span><br><span class="line">        p3.add(<span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">"West-2"</span>),BorderLayout.WEST);</span><br><span class="line">        <span class="comment">// 中间的四个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">            p4.add(<span class="keyword">new</span> <span class="title class_">Button</span>((<span class="string">"for-"</span>+i)));</span><br><span class="line">        }</span><br><span class="line">        p3.add(p4,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.add(p1);</span><br><span class="line">        frame.add(p3);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> {</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><img src="https://s1.ax1x.com/2022/09/23/xAi878.md.jpg" alt="Exercise"></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>Frame是一个顶级窗口</li><li>Panel无法单独显示，必须添加到某个容器中</li><li>布局管理器：<ul><li>流式</li><li>东西南北中</li><li>表格</li></ul></li><li>大小、定位、背景颜色、可见性、监听</li></ul><h3 id="3、Swin"><a href="#3、Swin" class="headerlink" title="3、Swin"></a>3、Swin</h3>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程学习笔记</title>
      <link href="/archives/5b5a394a.html"/>
      <url>/archives/5b5a394a.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h1><ul><li>本文章作为软件工程科目学习的笔记，依照本门课程要求，本篇博客将每周进行一次更新，在培养书写博客的习惯的同时，完成课堂笔记任务。其内容包含课上重点知识小结以及课后学堂在线相关课程的学习笔记，后续通过幕布app制作的思维导图也会以图片或者链接的方式保存于此。</li><li><a href="https://www.xuetangx.com/course/THU08091000367/12424539?channel=i.area.recent_search">学堂在线视频链接</a></li><li><a href="https://www.mubucm.com/doc/9phmPeCT4P">个人学习思维导图</a></li></ul><hr><h1 id="第一周个人学习清单"><a href="#第一周个人学习清单" class="headerlink" title="第一周个人学习清单"></a>第一周个人学习清单</h1><hr><p>1、学习清华软件工程第1章除1.5节以外的其他5节内容</p><ul><li><p>重点掌握概念和知识点：</p><ul><li>软件的定义及本质特征。</li></ul></li></ul><ul><li>软件工程发展历程及目前面临的主要挑战。</li></ul><ul><li>软件工程的基本概念及组成要素：过程、方法、工具。</li></ul><p>2、作业</p><ul><li><p>在线完成清华软件工程第1章后的<strong>测验题</strong>及<strong>讨论题。</strong></p></li><li><p>完成本章内容的学习笔记</p></li></ul><hr><h2 id="第一章：初识软件工程"><a href="#第一章：初识软件工程" class="headerlink" title="第一章：初识软件工程"></a>第一章：初识软件工程</h2><h3 id="1-1：软件工程无处不在"><a href="#1-1：软件工程无处不在" class="headerlink" title="1.1：软件工程无处不在"></a>1.1：软件工程无处不在</h3><ul><li>软件工程涵盖<font color="red"><strong>软件</strong></font>和<font color="red"><strong>工程</strong></font>两个部分<ul><li>软件是软件工程的研究对象，也是软件工程的产品形态与客观存在。</li><li>工程是将理论应用于实践的科学，目的是经济有效地解决实际问题。</li></ul></li></ul><ul><li><font color="red"><strong>软件工程：</strong></font>为了解决开发成本成本效益和软件质量的问题而产生的，倡导以工程的原理原则和方法进行软件开发，用系统的、可控的和有效的方式构建高质量的软件产品。</li></ul><ul><li>带着问题学习：<ul><li>软件具有哪些本质的特征？</li><li>软件开发面临哪些主要问题？</li><li>如何理解软件工程的基本概念和内涵？</li><li>软件开发应该遵循哪些工程化原则？</li><li>业内人士如何看待软件工程？</li></ul></li></ul><h3 id="1-2：软件的本质特征"><a href="#1-2：软件的本质特征" class="headerlink" title="1.2：软件的本质特征"></a>1.2：软件的本质特征</h3><ul><li>软件的定义：<font color="red"><strong>软件</strong></font> = <font color="green"><strong>程序</strong></font> + <font color="gray"><strong>数据</strong></font> + <font color="blue"><strong>文档</strong></font><ul><li>程序：计算机可以接受的一系列指令，运行时可以提供所要求的功能和性能。</li><li>数据：使得程序能够适当地操作信息的数据结构。</li><li>文档：描述程序的研制过程、方法和使用的图文资料。</li></ul></li></ul><ul><li>软件的行为只有通过<strong>运行</strong>才能呈现出来</li><li>在程序运行才能观察到软件的<strong>功能</strong>和<strong>性能</strong></li><li>软件更像是嵌入式的数字化知识、知识载体</li></ul><ul><li><p>软件的本质特性：软件具有<font color="red"><strong>复杂性</strong></font>、<font color="red"><strong>一致性</strong></font>和<font color="red"><strong>不可见性</strong></font>等固有的内在特性，这是造成软件开发困难的根本原因。</p><ul><li><font color="red"><strong>复杂性</strong></font>：软件可以说是人类创造的最复杂的物体</li><li><img src="https://s1.ax1x.com/2022/09/12/vXwtjH.md.png" alt="复杂性"></li><li><img src="https://s1.ax1x.com/2022/09/12/vXwUud.md.png" alt="复杂性"></li><li><font color="red"><strong>一致性</strong></font>：<ul><li>软件不能独立存在，需要依附于一定的环境（如硬件、网络以及其他软件）</li><li>软件必须遵从人为的惯例并适应已有的技术和系统</li><li>软件需要随接口不同而改变，随时间推移而变化，而这些变化都是不同人设计的结果</li></ul></li><li><font color="red"><strong>可变性</strong></font>：软件只要使用就会一直在变，而这个改变是随需而变。在理想情况下，随着软件使用，故障率逐渐下降，趋于稳定；但实际情况是，软件的每一次修改会造成故障率的升高，可能对软件结构造成破坏，最终可能导致软件发生退化，结束生命周期。<ul><li>人们总是认为软件是容易修改的，但忽视了修改所带来的副作用</li><li>不断地修改最终导致软件的退化，从而结束其生命周期</li><li>尽管如此，成功的软件都是会发生演变的，没有任何变化的软件一定是没有用的</li><li>软件的可变性给开发带来很多难题，但也给软件带来生命力</li><li>积极态度和有效方法控制变更，使软件在演化过程中保持高质量</li></ul></li><li><img src="https://s1.ax1x.com/2022/09/12/vXwaDA.md.png" alt="可变性"></li><li><font color="red"><strong>不可见性</strong></font>：<ul><li>软件是一种“看不见、摸不着”的逻辑实体，不具有空间的形体特征</li><li>开发人员可以直接看到程序代码，但是源代码并不是软件本身</li><li>软件是以机器代码的形式运行，但是开发人员无法看到源代码是如何执行的</li><li>不可见性限制软件的设计过程、严重阻碍相互之间的人与人的交流、对开发过程的管理造成困难</li></ul></li></ul></li></ul><h3 id="1-3：软件工程的产生与发展"><a href="#1-3：软件工程的产生与发展" class="headerlink" title="1.3：软件工程的产生与发展"></a>1.3：软件工程的产生与发展</h3><ul><li>Standish集团对软件项目跟踪调查的报告：<ul><li><img src="https://s1.ax1x.com/2022/09/12/vX0Vat.md.png" alt="vX0Vat.md.png"></li><li><img src="https://s1.ax1x.com/2022/09/12/vX0ZIP.md.png" alt="vX0ZIP.md.png"></li><li><img src="https://s1.ax1x.com/2022/09/12/vX0kqA.md.png" alt="vX0kqA.md.png"><ul><li><img src="https://s1.ax1x.com/2022/09/12/vX0EVI.md.png" alt="vX0EVI.md.png"></li></ul></li></ul></li></ul><ul><li>软件开发面临的挑战：</li></ul><p><img src="https://s1.ax1x.com/2022/09/12/vX0mPf.md.png" alt="vX0mPf.md.png"></p><ul><li>软件工程：致力于探索软件开发问题的解决之道</li></ul><p><img src="https://s1.ax1x.com/2022/09/12/vX0yIx.md.png" alt="vX0yIx.md.png"></p><h3 id="1-4：软件工程的基本概念"><a href="#1-4：软件工程的基本概念" class="headerlink" title="1.4：软件工程的基本概念"></a>1.4：软件工程的基本概念</h3><ul><li>工程的含义：应用有关的科学知识和技术手段，通过有组织的群体协作活动，建造具有预期使用价值的人造产品过程。工程是将理论和知识应用于实践的科学，一遍经济有效地解决问题。</li><li>工程活动具有以下特征：<ul><li>大规模的设计和建造</li><li>复杂问题与目标分解</li><li>团队协作与过程控制</li></ul></li><li>软件工程是：<ul><li>① 将系统性的、规范化的、可定量的方法应用于软件的开发、运行和维护，即工程化应用到软件上；</li><li>② 对①中所述方法的研究。</li></ul></li><li><p>软件工程的目标 ————- 创造出“足够好”的软件</p><ul><li>较低的开发成本</li><li>按时完成开发任务并及时交付</li><li>实现客户需要的功能</li><li>具有良好性能、可靠性、可拓展性、可移植性等</li><li>软件维护费用低</li></ul></li><li><p>软件工程的三个基本要素：</p><ul><li>过程：支持软件开发各个环节的控制和管理</li><li><img src="https://s1.ax1x.com/2022/09/12/vXsemQ.md.png" alt="vXsemQ.md.png"></li><li>方法：完成软件开发任务的技术手段</li><li><img src="https://s1.ax1x.com/2022/09/12/vXsnTs.md.png" alt="vXsnTs.md.png"></li><li>工具：为软件开发提供自动或半自动的软件支持环境</li><li><img src="https://s1.ax1x.com/2022/09/12/vXsmwj.md.png" alt="vXsmwj.md.png"></li></ul></li></ul><ul><li>软件开发的基本策略：<ul><li>软件复用：<ul><li>构造一个新的系统不必从零做起，直接复用已有的构件进行组装</li><li>构件是经过反复使用验证的，由其组成的新系统具有较高的质量</li></ul></li><li>分而治之：<ul><li>将一个复杂的问题分解成若干个简单的问题，然后逐个解决</li><li>来源于人们生活与工作经验，完全适合于技术领域</li></ul></li><li>逐步演进：<ul><li>软件开发是自底向上逐步有序的生长过程</li><li>小步快跑：每走完一步再调整并为下一步确定方向，直到终点</li></ul></li><li>优化折中：<ul><li>优化：优化软件的各个属性，如运行速度、资源利用、用户体验</li><li>折中：通过协调各个质量特征，实现整体质量最优</li></ul></li></ul></li></ul><h3 id="1-6：业界人士谈软件工程"><a href="#1-6：业界人士谈软件工程" class="headerlink" title="1.6：业界人士谈软件工程"></a>1.6：业界人士谈软件工程</h3><ul><li>业界人士如何看待软件工程<ul><li>在软件开发的过程中遇到的最大的困难是如何让大家<strong>并行地</strong>一起工作和一起解决，这就是软件工程涉及到的项目管理和项目协同地概念。</li><li>软件工程的开发<strong>不是一个人的工作</strong>，是很多人把自己的智慧和代码集合在一起，软件工程让很多人把自己的使用习惯都归结成一些规则，让每个人写出来的代码都是同样的思维，同样的思路，看起来像一个人写出来的代码，这就是软件工程的<strong>设计模式</strong>。</li></ul></li></ul><ul><li>业界人士认为程序员最重要的四个素质<ul><li>拥有极强的代码的阅读和理解的能力，以及<strong>书写代码</strong>的能力</li><li>有极强的<strong>责任心和责任感</strong>，对整个软件产业的<strong>敬畏之心</strong>（对前人和用户的体验的敬畏，自我反省，自我提升）</li><li>有<strong>职业道德</strong>，对代码的品质的保证和对整个公司秘密的保护</li><li>需要有和其他程序员<strong>协同的能力</strong>，人与人之间的相处，人与人之间如何交换自己的代码，开发的心得，开发的经验</li></ul></li></ul><h1 id="第二周个人学习清单"><a href="#第二周个人学习清单" class="headerlink" title="第二周个人学习清单"></a>第二周个人学习清单</h1><hr><ul><li>学习清华软件工程第8章中8.1、8.2、8.7共三节<ul><li>重点掌握概念和知识点：<ul><li>需求工程师的职责。</li><li>软件需求的定义。</li><li>获取软件需求的主要途径。</li><li>软件需求文档的框架。</li></ul></li></ul></li><li>学习清华软件工程第4章中4.1及4.2节<ul><li>重点掌握概念和知识点：<ul><li>软件过程概念及其组成。</li><li>传统软件工程模型如：瀑布、原型、增量模型的特点及其适用场合。</li><li>迭代模型特点及其适用场合。</li></ul></li></ul></li><li>个人作业：<ul><li>完成清华软件工程网课第4章课后测验题1-6。</li></ul></li></ul><h2 id="第八章：需求获取"><a href="#第八章：需求获取" class="headerlink" title="第八章：需求获取"></a>第八章：需求获取</h2><h3 id="8-1：需求工程师"><a href="#8-1：需求工程师" class="headerlink" title="8.1：需求工程师"></a>8.1：需求工程师</h3><ul><li>需求分析是软件工程中的重要步骤，是<font color="red">决定软件项目成败</font>的关键影响因素之一。</li><li>需求阶段的错误，在后期的纠错成本中将<strong>远远高于</strong>软件设计和实现阶段的错误的纠错成本。</li><li>在需求工程中，我们主要关注的是：软件和系统需求的<font color="red">获取、建模、分析、验证和管理</font>。</li><li>带着问题学习：<ul><li>如何产生软件产品的新的创意</li><li>如何和干系人进行有效地沟通</li><li>如何基于目标、场景和主体来建模软件系统的需求</li><li>如何用图形化的方法对软件系统的行为和结构进行分析</li></ul></li><li><font color="red">注意：</font><ul><li>将问题的分析和解决方案的生成区别开来</li><li>要根据软件项目本身的规模、人员的技能、客观的条件、项目的成本来选择合适的需求获取技术和建模方法，选择最合理的软件系统设计方案</li></ul></li></ul><ul><li>作为当代的需求工程师应该具有：<ul><li>分析问题和解决问题的能力</li><li>主动参与人机苟婷及交流的能力</li><li>软件工程的基本知识和技能</li><li>对应用领域有关知识的深厚了解</li><li>书面语言组织和表达能力</li></ul></li></ul><ul><li>优秀需求工程师的目标：<ul><li>识别错误假设</li><li>确保描述的一致性</li><li>对标准和规范的依从性</li><li>减少组织和个人的误解</li><li>提高支持人员的反映速度和效率</li><li>提升客户满意度</li><li>撰写优秀的需求文档</li></ul></li></ul><ul><li>需求分析师的<strong>七宗罪</strong>：<ul><li>干扰</li><li>沉默</li><li>过度规约</li><li>矛盾</li><li>含糊</li><li>向前引用</li><li>不切实际与一厢情愿</li></ul></li></ul><h3 id="8-2：需求定义"><a href="#8-2：需求定义" class="headerlink" title="8.2：需求定义"></a>8.2：需求定义</h3><ul><li>“需求”是对外可见的系统特征</li><li>“需求管理”有三项任务(Alan.M.Davis)：<ul><li>学习——需求获取</li><li>剪枝——需求优选</li><li>文档化——撰写需求规格说明书</li></ul></li></ul><ul><li>IEEE对需求定义的标准(IEEE 610.12,1990)：<ul><li>需求，是人们解决某个问题或达到某种目的的需要。是系统或其组成部分为满足某种<font color="red">书面规定</font>（合同，标准，规范等）所要具备的能力。需求将作为系统<font color="red">开发，测试，验收，提交的正式文档依据</font>。</li></ul></li></ul><ul><li>“需求”的定义(Herbert Simon)：<ul><li>每一个“<font color="red">人造物</font>”都是一个<font color="red">内部环境</font>与<font color="red">外部环境</font>的“<font color="red">接口</font>”。这里的内部环境指人造物本身的设计组成。外部环境指人造物的周遭及其作用环境。对这个接口的描述既是需求。</li></ul></li></ul><ul><li>需求描述的难点和挑战就在于，它是连接应用领域现象与机器领域现象的桥梁，我们要从应用领域的固有性质和用户待解决的需求描述转化为可以用计算机软件实现的系统行为的描述</li></ul><ul><li>需求是系统为满足客户期望的目标而完成的行为</li><li>需求要体现出对问题领域的清晰理解</li><li>给出系统的使用场景和上下文</li><li>在需求的定义中，要回答一下问题：<ul><li>问什么要设计这个系统</li><li>系统将由谁使用</li><li>系统要做什么</li><li>系统涉及哪些信息</li><li>对解决方案有何额外限制</li><li>如何使用该系统</li><li>质量指标约束要达到何种程度</li></ul></li><li><img src="https://s1.ax1x.com/2022/09/18/xpy95F.md.png" alt="举例"></li><li><img src="https://s1.ax1x.com/2022/09/18/xpyZb6.md.png" alt="举例"></li><li>将问题与解决方案分开<ul><li><img src="https://s1.ax1x.com/2022/09/18/xpynUO.md.png" alt="将问题与解决方案分开"></li></ul></li></ul><ul><li>什么是需求：<ul><li><img src="https://s1.ax1x.com/2022/09/18/xpyJqP.md.png" alt="什么是需求"></li><li><img src="https://s1.ax1x.com/2022/09/18/xpywGQ.md.png" alt="例一"></li></ul></li></ul><p>第二条领域性质的假设是存在问题的，“当飞机在跑道上移动时，轮胎转动”并没有覆盖客观世界的真实情况，在雨天路滑的时候，飞机在跑道上移动，但轮胎可能没有转动；此外，当飞机在跑到以外的地方移动是，轮胎也是转动的。所以这两种情况属于没有被我们现在的领域性质所覆盖的情况。因此，飞机的行为是与预期不符合的。</p><ul><li>存在问题的需求描述实例：<ul><li><font color="red">含糊的需求描述:</font><ul><li>工资总额由上一条记录获得</li><li>所有客户都具有同一控制域</li></ul></li><li><font color="red">错误的需求描述:</font><ul><li>所有的系统将九月作为财政年度的起始时间</li></ul></li><li><font color="red">不完整的需求描述:</font><ul><li>出错信息显示在屏幕的第24行</li></ul></li><li><font color="red">矛盾或不一致的描述需求:</font><ul><li>“C=A+B”; “C=A-B”</li></ul></li><li><font color="red">无法测试的需求:</font><ul><li>系统应具有友好的界面</li></ul></li></ul></li></ul><ul><li><p>需求规约：好的需求是可以度量的，能给出项目成功的必要条件</p><ul><li><p>单个需求项的质量：</p><ul><li>准确(Concise)</li><li>正确(Correcr)</li><li>明确(Non-ambiguous)</li><li>可行(Feasible)</li><li>可证(Verifiable)</li></ul></li><li><p>整个需求集合的质量：</p><ul><li>现实(Realistic)</li><li>精确(Concise)</li><li>全面(Complete)</li><li>一致(Consistent)</li></ul></li></ul></li></ul><h3 id="8-7：撰写需求文档"><a href="#8-7：撰写需求文档" class="headerlink" title="8.7：撰写需求文档"></a>8.7：撰写需求文档</h3><ul><li>软件需求规格说明(Software Requirement Specification SRS)<ul><li>是具有一定法律效力的合同文档</li><li>清楚地描述软件在什么情况下，需要做什么，以及不能做什么</li><li>以输入/输出、输入到输出之间的转换方式来描述功能性需求</li><li>描述经过干系人磋商达成的共识的非功能性需求</li><li>一般参考需求定义模板，覆盖标准模板中定义的所有条目</li><li>作为后续的软件评估依据和变更基准</li></ul></li></ul><ul><li>需求文档的组织形式<ul><li>文档需要有逻辑组织结构<ul><li>例如：参照IEEE的模板</li></ul></li><li>典型的组织包括：<ul><li>按系统能够响应的各种外部环境情况来组织</li><li>按系统特征来组织</li><li>按系统的响应方式来组织</li><li>按所管理的外部数据来组织</li><li>按用户类型来组织</li><li>按软件的工作模式来组织</li><li>按子系统的划分来组织</li></ul></li></ul></li></ul><ul><li><p>软件需求规格说明SRS的风格</p><ul><li><img src="https://s1.ax1x.com/2022/09/18/xpgfJS.md.png" alt="软件需求规格说明SRS的风格"></li></ul></li><li><p>选择合适的需求规格说明方式</p><ul><li><img src="https://s1.ax1x.com/2022/09/18/xpgXJU.md.png" alt="选择合适的需求规格说明方式"></li></ul></li><li>生成不同风格SRS的方法总览<ul><li><img src="https://s1.ax1x.com/2022/09/18/xp2ZSe.md.png" alt="生成不同风格SRS的方法总览"></li></ul></li><li><p>用户手册作为SRS</p><ul><li><img src="https://s1.ax1x.com/2022/09/18/xp2amn.md.png" alt="用户手册作为SRS"><br><img src="https://s1.ax1x.com/2022/09/18/xp2wT0.md.png" alt="用户手册大纲"></li></ul></li><li><p>需求规格说明的用户</p><ul><li><img src="https://s1.ax1x.com/2022/09/18/xp2dwq.md.png" alt="需求规格说明的用户"></li></ul></li><li>高质量需求规格说明：一个高质量的规格说明<ul><li>是所有需求的集合</li><li>描述产品要提供的所有功能</li><li>是软件解决方案的商业合同的基础</li><li>是测试计划的基础</li><li>定义产品需求的度量标准</li><li>是产品需求跟踪的先决条件</li><li>影响开发产品的项目计划</li></ul></li></ul><ul><li>高质量需求规格说明的评价标准<ul><li><img src="https://s1.ax1x.com/2022/09/18/xp2LnA.md.png" alt="高质量需求规格说明的评价标准"></li><li>正确性是指它真正表达了干系人的需求，也没有引入不必要的噪声需求</li><li>无歧义性是指对每一个需求项都只有一种合理的解释，不会导致误解</li><li>需求的完整性是指它涵盖了所有必要的功能，也给出了系统不应具有的行为，在概念上具有完整性，覆盖了所有可能的收入情况，在结构上也具有完整性，没有尚未添加的部分</li><li>可测试性是指每条需求他都是可证明的，有一个测试其满足度的过程</li><li>可跟踪性是指需求的来源清楚，每条需求都有唯一的索引号以备未来的引用</li><li>可修改性是指从结构和相互引用的逻辑上，具有清晰的条理，确保需求项的修改不会面临太大的困难，引入新的问题</li><li>易理解性是指它可以被非专业人士阅读理解</li><li>一致性是指需求的说法上不会存在自相矛盾的情况，术语的使用和引用也是一致的、连贯的</li><li>有序性是指需求之间按照重要程度或者稳定性，排有优先级的次序</li><li>建立<font color="red">高规格的需求规格说明</font>是未来项目<strong>成功的必要保证之一</strong>，但是建立<font color="red">完美的需求规格说明</font>也是<strong>不必要、不现实的</strong></li></ul></li></ul><ul><li>除以上的规约评价指标以外，我们还应该注意保证需求的规约是简洁的<ul><li>定义：一个需求描述是简洁的<ul><li>描述了系统的一个独立特征</li><li>除了必须的欣喜外没有包含其他信息</li><li>用清晰、简单、可理解的词表述</li><li>避免“应该”、“可以”、“可能”之类的用词</li></ul></li><li>举例：<ul><li>“急救电话的响应应本着先到先响应的原则” 相对 “急救电话应按照其拨入的次序存入一个先入先出的等待队列当中，并且按照进入队列的次序逐一应答”是简洁的</li></ul></li></ul></li></ul><ul><li>使用需求数据库时：<ul><li><img src="https://s1.ax1x.com/2022/09/18/xpW1xg.md.png" alt="使用需求数据库时"></li></ul></li></ul><ul><li><p>基于子系统划分来组织需求规格说明</p><ul><li><img src="https://s1.ax1x.com/2022/09/18/xpW8MQ.md.png" alt="xpW8MQ.md.png"></li></ul></li><li><p>需求规格说明SRS模板</p><ul><li>SRS需要根据预先定义的标准模式来组织，及根据模板来撰写</li><li>SRS的模板使得撰写统一的SRS变得简单</li><li>对于QA人员来说SRS指标变得简单</li><li>模板也适用于业务需求和系统需求</li><li>模板可以被用于半自动的从需求数据库或者用例模型生成SRS</li></ul></li></ul><ul><li>IEEE-830 SRS模板大纲<ul><li><img src="https://s1.ax1x.com/2022/09/18/xpW4zD.md.png" alt="IEEE-830 SRS模板大纲"></li><li><img src="https://s1.ax1x.com/2022/09/18/xpWhRO.md.png" alt="IEEE-830 SRS模板大纲"></li></ul></li><li>SRS模板的优缺点<ul><li>优点：<ul><li>模板提高效率</li><li>在有模板的情况下，面对一个完整的大纲，不容易遗漏重要的信息</li></ul></li><li>缺点：<ul><li>并非对于所有的系统，模板的章节设计都是类似的</li><li>如果仅仅为了满足标准，而填写模板的所有章节，会加入一些没有意义的内容</li><li>读者很难将这些无意义的文字和真正的需求分开</li></ul></li></ul></li></ul><ul><li>总结：<ul><li>尽快开始撰写需求</li><li>确定哪些属性将被用于分类和细化需求</li><li>产生一个初版本来刺激反馈</li><li>询问用户往往比咨询专家更有用</li><li>撰写需求时需要遵循的法则：<ul><li>使用简单、直接的语言</li><li>撰写可测试的需求</li><li>使用定义好的并达成共识的术语</li><li>一次只写一项需求</li></ul></li><li>随时准备迎接需求的变化<ul><li>这是一种态度</li><li>越多的干系人参与，将获得越多的需求特征</li><li>但不能通过减少干系人的方法来解决这个问题</li><li>干系人有改变他们想法的权利</li><li>不要问“这是你最终的需求吗？”</li><li>请将变化看成机会，不是威胁</li></ul></li></ul></li></ul><h2 id="第四章：软件开发过程"><a href="#第四章：软件开发过程" class="headerlink" title="第四章：软件开发过程"></a>第四章：软件开发过程</h2><h3 id="4-1：软件过程"><a href="#4-1：软件过程" class="headerlink" title="4.1：软件过程"></a>4.1：软件过程</h3><ul><li>带着问题学习：<ul><li>什么是过程？</li><li>过程在软件开发管理中起到什么作用？</li><li>软件过程又包括哪些基本活动？</li></ul></li></ul><ul><li><p>过程的含义：</p><ul><li><p><font color="red">过程</font>是一组将输入转化为输出的相互关联或相互作用的活动</p></li><li><p>客户需求  -&gt;  过程  -&gt;  客户满意的产品</p><p>[<img src="https://s1.ax1x.com/2022/09/18/xpoPPI.md.jpg" alt="过程的含义"></p></li></ul></li></ul><ul><li>过程方法：<ul><li><font color="red">过程方法</font>是系统地识别和管理组织内所使用的过程，保证更有效地获得期望的结果。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpoQGq.md.jpg" alt="过程方法"></li><li>其中实现过程是提供有价值产品或服务的关键性活动，这些活动负责吧输入转换为输出</li><li>支持活动负责提供所需要的资源和能力，从而使关键性的实现活动能够顺利进行</li><li>管理活动则是衡量和评价实现过程和支持效能的过程，建立起组织的质量管理体系</li></ul></li></ul><ul><li>软件过程<ul><li><img src="https://s1.ax1x.com/2022/09/18/xpozlV.md.jpg" alt="xpozlV.md.jpg"></li></ul></li></ul><ul><li>软件开发活动<ul><li><font color="red">问题定义：</font>人们通过开展技术探索和市场调查等活动，研究系统可行性和可能的解决方案，确定待开发系统的总体目标和范围</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTm6K.md.jpg" alt="问题定义"></li><li><font color="red">需求开发：</font>在可行性研究之后，分析、整理和提炼所收集到的用户需求，建立完整的需求分析模型，编写软件需求规格说明。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTypq.md.jpg" alt="需求开发"></li><li><font color="red">软件设计：</font>根据需求规格说明，确定软件体系结构，进一步设计每个系统部件的实现算法、数据结构及其接口等。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTw7Q.md.jpg" alt="软件设计"></li><li><font color="red">软件构造：</font>概括地说是将软件设计转换成程序代码，这是一个复杂而迭代的过程，要求根据设计模型进行程序设计以及正确而高效地编写和测试代码。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTDts.md.jpg" alt="软件构造"></li><li><font color="red">软件测试：</font>检查和验证所开发的系统是否符合客户期望，主要包括单元测试、子系统测试、集成测试和验收测试等活动。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTBkj.md.jpg" alt="软件测试"></li><li><font color="red">软件维护：</font>系统投入使用后对其进行改进，以适应不断变化的需求。完全从头开发的系统很少，将软件系统的开发和维护看成是一个连续过程更有意义。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpTrhn.md.jpg" alt="软件维护"></li></ul></li></ul><ul><li>软件开发管理<ul><li><font color="red">软件项目管理</font>是为了使软件项目能够按照预定的成本、进度、质量顺利完成，而对成本、人员、进度、质量和风险进行控制和管理的活动。</li><li><img src="https://s1.ax1x.com/2022/09/18/xp7e4s.md.jpg" alt="软件项目管理"></li><li><font color="red">软件配置管理</font>是通过执行版本控制、变更控制的规程，并且使用合适的配置管理软件，来保证所有产品配置项的完整性和可跟踪性。</li><li><img src="https://s1.ax1x.com/2022/09/18/xp7ZNj.md.jpg" alt="软件配置管理"></li></ul></li></ul><h3 id="4-2：软件过程模型"><a href="#4-2：软件过程模型" class="headerlink" title="4.2：软件过程模型"></a>4.2：软件过程模型</h3><ul><li><p>软件过程是为了获得高质量软件，所需要完成的一系列任务，它定义了完成各项任务的工作步骤，把任务、人员和工具，密切地结合在一起</p></li><li><p>软件过程模型就是对软件过程的抽象描述</p><ul><li><img src="https://s6.jpg.cm/2022/09/20/PUHeZL.jpg" alt="软件过程模型"></li><li><p>常见的软件过程模型包括：</p></li><li><p><img src="https://s1.ax1x.com/2022/09/19/x9TsR1.md.jpg" alt="常见的软件过程模型"></p></li><li>瀑布式模型<ul><li>将基本的活动开发看成是一系列界限分明的独立阶段，这些活动以线性的方式顺序执行，这是一种计划驱动的软件过程，有利于规范软件开发活动。</li><li><img src="https://s1.ax1x.com/2022/09/18/xpOM0f.md.jpg" alt="瀑布式模型"></li><li><img src="https://s1.ax1x.com/2022/09/18/xpOm6I.md.jpg" alt="瀑布式模型"></li><li>软件的行为只有在运行过程中，才能显现出来，因此瀑布模型只有到测试阶段才能真正地验证和确认软件的功能和性能，但是这个时候所有的代码都已经开发完成，很难返回去纠正需求的问题和设计的缺陷。显然这种模型虽然对各个阶段进行严格控制，但是却缺少了对变化的适应</li><li>瀑布模型看似美丽，却不现实，目前已经很少在业界使用。它的主要问题在于各个阶段的划分完全固定，阶段之间产生大量的文档，增加了开发工作量。由于开发过程是线性的，用户只有在整个过程结束时，才能看到开发成果，开发过程中间，很难相应用户的变更要求，早期的错误也要等到开发后期的测试阶段才能发现，这样会产生严重的后果</li><li>因此，瀑布模型仅适用于软件需求在开发初期就可以被完整地确定这样的软件项目，而且用户使用的环境也要很稳定，显然这样的要求是不现实的</li></ul></li><li><p>一般来说软件需要解决以前从未解决过的问题，或者当前的解决方案需要不断更新，以适应业务环境的不断变化，因此软件开发具有迭代性。</p><ul><li><p><img src="https://s1.ax1x.com/2022/09/18/xpOnXt.md.jpg" alt="xpOnXt.md.jpg"></p></li><li><p>随着人们对问题的逐步理解，以及对可选方案的评估，软件在不断地演化。因此，软件开发是一个创造的过程，而不是一个制造的过程</p></li></ul></li><li><p>原型化模型</p><ul><li>主要是解决需求不确定的问题，原型是一个部分开发的产品，用于加强对系统的理解，有助于明确需求和选择可行的设计策略。</li><li><img src="https://s6.jpg.cm/2022/09/20/PUHcr8.jpg" alt="原型化模型"></li><li>原型化模型需要迅速建造一个可运行的软件原型，使用户和开发人员对系统的相关方面进行检查，以决定是否合适和恰当</li></ul></li><li>迭代式开发<ul><li>将描述、开发和验证等不同活动交织在一起，在开发过程中建立一系列版本，将系统一部分一部分地逐步交付。</li><li><img src="https://s6.jpg.cm/2022/09/20/PUHNX5.jpg" alt="迭代式开发"></li><li><img src="https://s6.jpg.cm/2022/09/20/PUHJZr.jpg" alt="迭代式开发"></li><li>迭代式的开发使得软件系统能够逐步的进行交付，开发人员在完成一部分功能之后，形成一个产品版本，然后将其发布给用户使用，当用户使用第一个版本的时候，开发人员继续开发下一个版本，如此迭代循环，这样做不仅可以缩短产品的开发周期，还可以更好的获得用户对产品的反馈</li><li><img src="https://s6.jpg.cm/2022/09/20/PUHSpC.jpg" alt="迭代式开发的两种方式"></li><li><img src="https://s6.jpg.cm/2022/09/20/PUHYat.jpg" alt="迭代式开发的两种方式"></li></ul></li><li><p>可转换模型</p><ul><li><p>利用自动化的手段，通过一系列转化将需求规格说明转化为一个可交付使用的系统。</p></li><li><p><img src="https://s6.jpg.cm/2022/09/20/PUHseR.jpg" alt="可转换模型"></p></li><li><p>犯错是人的天性，往往是因为犯错造成了软件的缺陷，因此，可转换模型是采用形式化的数学方法描述系统，并利用自动化手段通过一系列转换，将形式化的需求规格说明，变为可交付使用的系统。</p></li><li><p>建立形式化的数学描述是一个比较困难的工作，目前这种方法还是主要应用于有限状态的嵌入式系统中</p></li></ul></li><li>案例分析<ul><li><img src="https://s6.jpg.cm/2022/09/20/PUHErz.jpg" alt="案例分析"></li><li><img src="https://s6.jpg.cm/2022/09/20/PUHFKu.jpg" alt="案例一"></li><li><img src="https://s6.jpg.cm/2022/09/20/PUHpH4.jpg" alt="案例二"></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模学习</title>
      <link href="/archives/ae67057d.html"/>
      <url>/archives/ae67057d.html</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模学习"><a href="#数学建模学习" class="headerlink" title="数学建模学习"></a>数学建模学习</h1><ul><li><a href="(https://www.bilibili.com/video/BV1kC4y1a7Ee?p=1&amp;vd_source=605fdf76b89347cc08747ed724ad5651">学习视频资源</a>)</li><li>观看指南：<br>p1——p2基础<br>p3——p36算法<br>p37——56建模（MATLAB）<br>p57——65写作<br>p66——69，p81——83，p108——111获奖指南总结性的东西<br>p70——80国赛<br>p84——107美赛<br>p112——120实战</li></ul><h1 id="数学建模基础入门与组队策略"><a href="#数学建模基础入门与组队策略" class="headerlink" title="数学建模基础入门与组队策略"></a>数学建模基础入门与组队策略</h1><h2 id="数学建模的分类"><a href="#数学建模的分类" class="headerlink" title="数学建模的分类"></a>数学建模的分类</h2><ol><li>按所用数学知识分类：</li></ol><ul><li>初等模型、几何模型、微积分模型、微分方程模型、图论模型、概率统计模型、规划论模型等。</li></ul><ol><li>按所解决的问题领域分类：</li></ol><ul><li>物理模型：自然科学领域内的问题。</li><li>非物理模型：经济模型、交通模型、人口模型、生态模型、环境模型、医学模型、社会学模型。</li></ul><ol><li>按所建模目的分类：</li></ol><ul><li>描述模型、分析模型、预报模型、优化模型、决策模型、控制模型等。</li></ul><ol><li>按模型的表现特性分类：</li></ol><ul><li>确定模型、随机模型；静态模型、动态模型、离散模型、连续模型</li></ul><h2 id="数学模型有哪些模块？"><a href="#数学模型有哪些模块？" class="headerlink" title="数学模型有哪些模块？"></a>数学模型有哪些模块？</h2><h3 id="数学建模的一般步骤"><a href="#数学建模的一般步骤" class="headerlink" title="数学建模的一般步骤"></a>数学建模的一般步骤</h3><h4 id="1、模型假设"><a href="#1、模型假设" class="headerlink" title="1、模型假设"></a>1、模型假设</h4><blockquote><p>针对问题特点和建模目的作出合理的、简化的假设</p></blockquote><p>在合理和简化之中作出折中</p><h4 id="2、建立模型"><a href="#2、建立模型" class="headerlink" title="2、建立模型"></a>2、建立模型</h4><blockquote><p>用数学的语言、符号描述问题</p><p>发挥想象力</p></blockquote><p>尽量采用简单的数学工具</p><p><img src="https://s2.loli.net/2022/08/07/GOgQestmKZHoX4i.png" alt="数学建模全过程"></p><ul><li><strong>表述（问题重述）</strong>：根据建模目的和信息将实际问题“翻译”成数学问题</li></ul><p>【注意】问题重述不是简单的将原问题复制粘贴，要将现实世界的问题通过表述归纳的方法利用数学公式或算法建立一定的数学模型</p><ul><li><strong>求解</strong>：选择适当的数学方法利用软件对数学模型进行求解</li><li><strong>解释</strong>：将数学语言表述的解答“翻译”回实际对象（结果的好坏、得到什么信息、浅层？深层？）</li><li><strong>验证</strong>：用现实对象的信息检验得到的解答（以此来检验该模型是否准确）</li></ul><h2 id="完整的数学建模论文的要素"><a href="#完整的数学建模论文的要素" class="headerlink" title="完整的数学建模论文的要素"></a>完整的数学建模论文的要素</h2><p><img src="https://s2.loli.net/2022/08/07/CQx5GbcifyHDmrU.png" alt="完整的数学建模论文的要素"></p><ul><li><strong>题目</strong>：点睛之笔</li><li><strong>摘要、关键词（关键）</strong>：整个评审的关键，要传递出基本信息</li><li><strong>问题重述</strong>：用自己的语言，将题目中的问题转述称数学语言</li><li><strong>问题假设</strong>：要对模型作出合理的假设或对全文作出一个合理假设</li><li><strong>问题分析</strong>：针对这个问题，你打算怎么做、怎么解？用什么模型来求解？你的思路是什么？</li><li><strong>符号说明</strong>：常用符号为了避免冗余可以将其意写在符号说明中</li><li><strong>模型建立</strong>：通过数学符号和公式建立一个实现某一功能的数学模型</li><li><strong>模型求解</strong>：利用计算软件等对模型求解的过程</li><li><strong>模型优缺点评价</strong>：评价模型优劣，有哪些优缺点，是否经得起考验</li><li><strong>参考文献</strong>：<a href="(https://baike.baidu.com/item/参考文献标准格式/15571284?fr=aladdin">参照标准文献写作格式</a>)</li></ul><h2 id="分模块学习"><a href="#分模块学习" class="headerlink" title="分模块学习"></a>分模块学习</h2><h3 id="题目备战："><a href="#题目备战：" class="headerlink" title="题目备战："></a>题目备战：</h3><ul><li>掌握固定模式即可</li><li>基于<strong><strong>模型的</strong></strong>研究与分析</li><li>也可以使用比较诙谐可爱的题目（正经）</li></ul><h3 id="摘要备战："><a href="#摘要备战：" class="headerlink" title="摘要备战："></a>摘要备战：</h3><ul><li>总结归纳能力，通过看高水平论文或优秀论文掌握</li><li>切忌大段描述，一般摘要不超过整个页面的四分之三</li></ul><h3 id="问题重述："><a href="#问题重述：" class="headerlink" title="问题重述："></a>问题重述：</h3><ul><li>切忌直接抄袭问题，对描述简短的拆建，描述复杂的精炼</li></ul><h3 id="问题假设："><a href="#问题假设：" class="headerlink" title="问题假设："></a>问题假设：</h3><ul><li>明确假设点是关键，只要对我们的结果有影响，但又是小概率事件；或者对结果有影响，难以计算获取这类的</li><li>考察对问题的理解以及对模型的适用性能力的评价</li></ul><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><ul><li>动脑能力是关键，现将问题进行定性，然后说明如何求解这类问题</li><li>考察对问题的求解能力，不要求写具体的模型和算法，而是要提供一个思路</li><li>写思路：分析问题、拆解问题、匹配模型</li><li>最好做一个流程图，能更加直观地显示</li></ul><h3 id="符号说明："><a href="#符号说明：" class="headerlink" title="符号说明："></a>符号说明：</h3><ul><li>文中出现的符号均需说清楚，用希腊字母</li></ul><h3 id="模型建立："><a href="#模型建立：" class="headerlink" title="模型建立："></a>模型建立：</h3><ul><li>将常见模型进行归纳整理，形成算法库</li></ul><h3 id="模型求解："><a href="#模型求解：" class="headerlink" title="模型求解："></a>模型求解：</h3><ul><li>对编程语言熟练掌握</li></ul><h3 id="模型优缺点评价："><a href="#模型优缺点评价：" class="headerlink" title="模型优缺点评价："></a>模型优缺点评价：</h3><ul><li>对模型的不足提前掌握，并应用于不足阐述</li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li>按标准格式书写</li></ul><h2 id="数学建模备战应该准备什么？"><a href="#数学建模备战应该准备什么？" class="headerlink" title="数学建模备战应该准备什么？"></a>数学建模备战应该准备什么？</h2><ul><li>（1）必须找好两个靠谱的队友，定期组织研讨和交流</li><li>（2）必须每三天看一篇优秀的数模论文，重点看摘要和问题分析及建模过程</li><li>（3）必须明确三人的分工，确保写作、建模、编程 团队都具备</li><li>（4）必须清晰地明白建模各部分到底应该写什么</li><li>（5）必须对所有常见算法进行系统的学习，明确算法用途和实现过程</li><li>备战时间建议：</li><li>每天拿出两个小时学习数学建模：按照算法、编程、写作、排版的顺序进行</li><li>算法：课程+《数学建模书籍（司守奎）》，编程（Matlab自学一本通2018版本即可），写作（整理优秀论文对语言进行学习），排版（学习LATEX软件）</li><li>每人每三天阅读完一篇获奖优秀论文，并和队友沟通分享经验</li><li>每半个月适当开一次总结会，发表自己的学习收获和下一步的工作中心</li><li><p>每月进行一次全真模拟，找老师进行论文评估</p></li><li><p>比赛开始后，三人应首先集中一切力量准备一套切实可行的思路，不可盲目直接建模，一旦敲定思路，论文写作成员要尽快寻找该模型所涉及到的原理知识，编程人员即使调试对应代码，建模人员要及时找出赛题与该模型的结合点</p></li><li>建模与论文撰写应该是同步的，队长要做好信息汇总与结果结论反馈工作，确保不会出现信息延迟等失误</li></ul><h1 id="线性规划模型基本原理与案例分享"><a href="#线性规划模型基本原理与案例分享" class="headerlink" title="线性规划模型基本原理与案例分享"></a>线性规划模型基本原理与案例分享</h1><h2 id="线性规划问题"><a href="#线性规划问题" class="headerlink" title="线性规划问题"></a>线性规划问题</h2><h3 id="例-1-1"><a href="#例-1-1" class="headerlink" title="例 1.1"></a>例 1.1</h3><p><img src="https://s1.ax1x.com/2022/08/31/v4Ijxg.jpg" alt="例1.1"></p><p>上述问题的数学模型：设该厂生产x1台甲机床和x2台乙机床时总利润z最大，则x1，x2应满足：</p><blockquote><p>max    z = 4x1 + 3x2        (1.1)</p><p>2x1 + x2 &lt; 10</p><p>x1 + x2  &lt;= 8</p><p>x2 &lt;= 7</p><p>x1, x2 &gt;= 0</p></blockquote><p>变量x1,x2称之为决策向量，(1.1)式被称之为问题的目标函数，(1.2)中几个不等式是问题的约束条件，记为s.t.(即 subject to)</p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 例1.1</span></span><br><span class="line">f = [<span class="number">-4</span>,<span class="number">-3</span>];</span><br><span class="line">a = [<span class="number">2</span>,<span class="number">1</span>;<span class="number">1</span>,<span class="number">1</span>;<span class="number">0</span>,<span class="number">1</span>;<span class="number">-1</span>,<span class="number">-1</span>];</span><br><span class="line">b = [<span class="number">10</span>;<span class="number">8</span>;<span class="number">7</span>;<span class="number">0</span>];</span><br><span class="line">[x,y] = linprog(f,a,b)</span><br><span class="line">x,y=-y</span><br></pre></td></tr></tbody></table></figure><font color="red">目标函数及约束条件均为线性函数，故被称为线性规划问题</font><h3 id="线性规划问题的解的概念"><a href="#线性规划问题的解的概念" class="headerlink" title="线性规划问题的解的概念"></a>线性规划问题的解的概念</h3><p>对比MATLAB解决线性规划问题的标准模型和数学标准模型</p><p>MATLAB标准模型为：</p><p>其中c，x，b，beq，lb，ub为列向量，c称为价值向量，b称为资源向量，A，Aeq为矩阵</p><p><a href="https://imgse.com/i/v4Tg1O"><img src="https://s1.ax1x.com/2022/08/31/v4Tg1O.png" alt="v4Tg1O.png"></a>数学标准模型为：</p><p>将数学模型转换为MATLAB标准模型才能编程使用（最大值加”-“改为最小值）</p><p><img src="https://s1.ax1x.com/2022/08/31/v4Tc9K.png" alt="v4Tc9K.png"></p><font color="red">可行解：</font>满足约束条件(1.4)的解x=[x1,L,xn]<sup>T</sup> ，称为线性规划的可行解，而使目标函数(1.3)达到最大值的可行解叫做最优解。<font color="red">可行域：</font>所有可行解构成的集合称为问题的可行域，记为R。---MATLAB 中求解线性规划的命令为：<figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x,faval] = linprog(c,A,b)</span><br><span class="line">[x,faval] = linprog(c,A,b,Aeq,beq)</span><br><span class="line">[x,faval] = linprog(c,A,b,Aeq,beq,lb,ub)</span><br></pre></td></tr></tbody></table></figure>其中x返回的是决策向量的取值，fval返回的是目标函数的最优值，c为价值向量，A，b对应的是线性不等式约束，Aeq，beq对应的是线性等式约束，lb和ub分别对应的是决策向量的下界向量和上界向量。### 例1.2![例1.2](https://s1.ax1x.com/2022/08/31/v4Oy4A.png)<figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 例1.2</span></span><br><span class="line">f = [<span class="number">-2</span>;<span class="number">-3</span>;<span class="number">5</span>];</span><br><span class="line">a = [<span class="number">-2</span>,<span class="number">5</span>,<span class="number">-1</span>;<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>];</span><br><span class="line">b = [<span class="number">-10</span>;<span class="number">12</span>];</span><br><span class="line">aeq = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">beq = <span class="number">7</span>;</span><br><span class="line">[x,y] = linprog(f,a,b,aeq,beq,<span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">1</span>));</span><br><span class="line">x,y=-y</span><br></pre></td></tr></tbody></table></figure>### 可以转换为线性规划的问题![v4xFvq.png](https://s1.ax1x.com/2022/08/31/v4xFvq.png)### 1.2投资的收益和风险![问题](https://s1.ax1x.com/2022/09/04/vTeiwD.png)表1.1 投资的相关数据更多操作| s<sub>i</sub> | r<sub>i</sub>(%) | q<sub>i</sub>(%) | p<sub>i</sub>(%) | u<sub>i</sub>(元) || ------------- | ---------------- | ---------------- | ---------------- | ----------------- || s<sub>1</sub> | 28               | 2.5              | 1                | 103               || s<sub>2</sub> | 21               | 1.5              | 2                | 198               || s<sub>3</sub> | 23               | 5.5              | 4.5              | 52                || s<sub>4</sub> | 25               | 2.6              | 6.5              | 40                |试给该公司设计一种投资组合方案，即用给点资金M，有选择的购买若干种资产或存银行生息，使净收益尽可能大，使总体风险尽可能小。![符号规定](https://s1.ax1x.com/2022/09/04/vTnfFe.png)![基本假设](https://s1.ax1x.com/2022/09/04/vTnoQI.png)![模型的分析与建立](https://s1.ax1x.com/2022/09/04/vTnvWj.png)![](https://s1.ax1x.com/2022/09/04/vTuPmV.md.png)其中目标函数第一项，就是净收益，我们要使净收益最大；目标函数第二项，先看后半部分max{q<sub>i</sub>x<sub>i</sub>}，首先找出最大的风险损失率，然后使其最小（因为我们在假设时是将最大的风险损失率当做整体的风险损失率）约束条件第一项指的是，你所真正投资的钱加上投资所需的费用，总和应该等于你的总资金。<font color="red">三种方法将多目标规划转换为线性规划：</font><ul><li><p>a)在实际投资中，投资者承受风险的程度是不一样的，若给定风险一个界限a，使最大的一个风险</p><p>q<sub>i</sub>x<sub>i</sub>/M &lt;= a，可找到相应的投资方案。这样把多目标规划变成一个线性规划。</p><p><img src="https://s1.ax1x.com/2022/09/04/vTKeUS.md.png" alt="vTKeUS.md.png"></p></li></ul><p>将原先需要最小化的损失限界，只要小于该比例即可</p><ul><li>b)固定盈利水平，只要使得我的盈利不小于k就可以</li></ul><p><img src="https://s1.ax1x.com/2022/09/04/vTKYUU.md.png" alt="vTKYUU.md.png"></p><ul><li>c)投资者在权衡投资风险和预期收益两方面时，希望选择一个令自己满意的投资组合，对风险、收益分别赋予权重s(0&lt;s&lt;=1)，s称为投资偏好系数。</li></ul><p><img src="https://s1.ax1x.com/2022/09/04/vTKBK1.md.png" alt="vTKBK1.md.png"></p><p>其中第一项：使得总风险减去总收益最小即可（也可以写作总收益减去总风险最大）</p><font color="red">模型一求解：</font><p><img src="https://s1.ax1x.com/2022/09/04/vTMpZV.md.png" alt="vTMpZV.md.png"></p><figure class="highlight matlab"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 模型一</span></span><br><span class="line">clc,clear</span><br><span class="line">a = <span class="number">0</span>;<span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">0.05</span></span><br><span class="line">    c = [<span class="number">-0.05</span>,<span class="number">-0.27</span>,<span class="number">-0.19</span>,<span class="number">-0.185</span>,<span class="number">-0.185</span>];</span><br><span class="line">    <span class="comment">% 四行一列的零矩阵代表银行存款投资为0</span></span><br><span class="line">    A = [<span class="built_in">zeros</span>(<span class="number">4</span>,<span class="number">1</span>),<span class="built_in">diag</span>([<span class="number">0.025</span>,<span class="number">0.015</span>,<span class="number">0.055</span>,<span class="number">0.026</span>])];</span><br><span class="line">    b = a*<span class="built_in">ones</span>(<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line">    Aeq = [<span class="number">1</span>,<span class="number">1.01</span>,<span class="number">1.02</span>,<span class="number">1.045</span>,<span class="number">1.065</span>];</span><br><span class="line">    beq = <span class="number">1</span>;</span><br><span class="line">    LB = <span class="built_in">zeros</span>(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">    [x,Q] = linprog(c,A,b,Aeq,beq,LB);</span><br><span class="line">    Q = -Q;</span><br><span class="line">    <span class="built_in">plot</span>(a,Q,<span class="string">'*k'</span>);</span><br><span class="line">    a = a+<span class="number">0.001</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">xlabel(<span class="string">'a'</span>),ylabel(<span class="string">'Q'</span>)</span><br><span class="line">title(<span class="string">'风险与收益关系图'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s1.ax1x.com/2022/09/04/vTMvfe.md.png" alt="风险与收益关系图"></p><p><img src="https://s1.ax1x.com/2022/09/04/vTQ9OI.md.png" alt=""></p><h2 id="整数规划基本原理与编程实践"><a href="#整数规划基本原理与编程实践" class="headerlink" title="整数规划基本原理与编程实践"></a>整数规划基本原理与编程实践</h2> <font color="red">整数规划模型(IP)：</font><p>在数学规划中（部分或全部）限制为整数时，称为整数规划。若在线性规划中，变量限制为整数，则称为整数线性规划。目前所流行的求解整数规划的方法，往往只适用于整数线性规划。</p><font color="red">整数规划分类：</font><ul><li>变量全部限制为整数时，称为纯（完全）整数规划。</li><li>变量部分限制为整数时，称为混合整数规划。</li></ul><font color="red">整数规划特点：</font><ul><li>原线性规划有最优解，当自变量限制为整数后，其整数规划解出现下述情况：<ul><li>原线性规划最优解全是整数，则整数规划最优解和线性规划最优解一致。</li><li>整数规划无可行解。</li><li>有可行解（当然就存在最优解），但最优解值变差。</li></ul></li><li>整数规划最优解不能按照实数最优解简单取整获得。</li></ul><p><img src="https://s1.ax1x.com/2022/09/05/vTN8Nn.md.png" alt="例一"></p><p><img src="https://s1.ax1x.com/2022/09/05/vTNGhq.md.png" alt="例一"></p><p>其中A代表零件的不同类型，B代表不同的下料（加工）方式，a代表使用该下料方式下生产出该零件的数量，b代表所需的该零件的总量。</p><p>该模型为：</p><p><img src="https://s1.ax1x.com/2022/09/05/vTNrNR.md.jpg" alt="vTNrNR.md.jpg"></p><p>第一项使得原材料最小，第二项使得每种下料方式获取的不同种类的零件其总和大于等于该零件的需求量。</p><p><img src="https://s1.ax1x.com/2022/09/05/vTN2jO.md.png" alt="例二"></p><p><img src="https://s1.ax1x.com/2022/09/05/vTNo4I.md.png" alt=""></p><p><img src="https://s1.ax1x.com/2022/09/05/vTUUPI.md.png" alt=""></p><p>其中最小值指所需费用：第一项为工厂的运量乘以运往某地的单价即运输费用；第二项为建厂的费用。</p><p>限制条件第一项指的是该工厂的运量应该小于该工厂的生产量</p><p><img src="https://s1.ax1x.com/2022/09/05/vTU5sU.md.png" alt="vTU5sU.md.png"></p><p><img src="https://s1.ax1x.com/2022/09/05/vTUqiR.md.png" alt="vTUqiR.md.png"></p><p>（ILP）即整数规划</p><h3 id="分支定界算法求解整数规划原理及编程实现"><a href="#分支定界算法求解整数规划原理及编程实现" class="headerlink" title="分支定界算法求解整数规划原理及编程实现"></a>分支定界算法求解整数规划原理及编程实现</h3>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习</title>
      <link href="/archives/8df0ec14.html"/>
      <url>/archives/8df0ec14.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习指南"><a href="#学习指南" class="headerlink" title="学习指南"></a>学习指南</h1><p><a href="https://www.bilibili.com/video/BV12J41137hu?share_source=copy_web&amp;vd_source=125214e0a845d5ec0516cfb855085d1c">学习视频</a></p><h1 id="chapter-01"><a href="#chapter-01" class="headerlink" title="chapter 01"></a>chapter 01</h1><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ol><li>建立一个新文件夹，用于存放代码 (Creat a new directory for your code)</li><li><p>新建一个java文件 (Creat a new java file)</p><ul><li>文件名后缀为.java (The file name extension is .java)</li><li>Hello.java</li><li><p>【注意】系统可能没有显示文件后缀名，需要手动打开 </p><p>[Attention] The system may not display the file name extension. You need to open the file manually</p></li></ul></li><li>编写代码 (Edit code)</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>{</span><br><span class="line">        System.out.print(<span class="string">"Hello,World!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><p>编译javac java文件，会生成一个class文件</p><p>compiling the javac java file generates a “class file”</p></li><li><p>运行class文件，java class文件</p><p>Run the class file, java “class file”</p></li></ol><p><img src="https://s2.loli.net/2022/08/05/orV8EYXvzCS2ApI.png" alt="java01.png"></p><h2 id="可能遇到的情况-What-you-might-encounter"><a href="#可能遇到的情况-What-you-might-encounter" class="headerlink" title="可能遇到的情况 (What you might encounter)"></a>可能遇到的情况 (What you might encounter)</h2><ol><li><p>每个单词的大小写不能出现问题，<strong>java是大小写敏感的</strong></p><p>The case of each word should not be incorrect. <strong>java is case sensitive</strong></p></li><li><p>尽量使用英文 (Try to use English)</p></li><li><p><strong>文件名</strong> 和 <strong>类名</strong> 必须保证一致 (<strong>File name</strong> and <strong>Class name</strong> must be the same)</p></li><li><p>符号不能使用中文 (The symbol cannot be in Chinese)</p></li></ol><h2 id="注释-（comment）"><a href="#注释-（comment）" class="headerlink" title="注释 （comment）"></a>注释 （comment）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 单行注释 Single-line comments</span></span><br><span class="line">        <span class="comment">// 输出一个Hello,World! Output a "Hello,World!"</span></span><br><span class="line">        System.out.println(<span class="string">"HelloWorld!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多行注释 Multiline comment /* 注释 */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">        我是多行注释</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JavaDoc：文档注释</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Description</span> HelloWorld!</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@Author</span> 聂千龙</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *                    _ooOoo_</span></span><br><span class="line"><span class="comment"> *                   o8888888o</span></span><br><span class="line"><span class="comment"> *                   88" . "88</span></span><br><span class="line"><span class="comment"> *                   (| -_- |)</span></span><br><span class="line"><span class="comment"> *                    O\ = /O</span></span><br><span class="line"><span class="comment"> *                ____/`---'\____</span></span><br><span class="line"><span class="comment"> *              .   ' \\| |// `.</span></span><br><span class="line"><span class="comment"> *               / \\||| : |||// \</span></span><br><span class="line"><span class="comment"> *             / _||||| -:- |||||- \</span></span><br><span class="line"><span class="comment"> *               | | \\\ - /// | |</span></span><br><span class="line"><span class="comment"> *             | \_| ''\---/'' | |</span></span><br><span class="line"><span class="comment"> *              \ .-\__ `-` ___/-. /</span></span><br><span class="line"><span class="comment"> *           ___`. .' /--.--\ `. . __</span></span><br><span class="line"><span class="comment"> *        ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span></span><br><span class="line"><span class="comment"> *       | | : `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment"> *         \ \ `-. \_ __\ /__ _/ .-` / /</span></span><br><span class="line"><span class="comment"> * ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment"> *                    `=---='</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * .............................................</span></span><br><span class="line"><span class="comment"> *          佛祖保佑             永无BUG</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *  佛曰:</span></span><br><span class="line"><span class="comment"> *          写字楼里写字间，写字间里程序员；</span></span><br><span class="line"><span class="comment"> *          程序人员写程序，又拿程序换酒钱。</span></span><br><span class="line"><span class="comment"> *          酒醒只在网上坐，酒醉还来网下眠；</span></span><br><span class="line"><span class="comment"> *          酒醉酒醒日复日，网上网下年复年。</span></span><br><span class="line"><span class="comment"> *          但愿老死电脑间，不愿鞠躬老板前；</span></span><br><span class="line"><span class="comment"> *          奔驰宝马贵者趣，公交自行程序员。</span></span><br><span class="line"><span class="comment"> *          别人笑我忒疯癫，我笑自己命太贱；</span></span><br><span class="line"><span class="comment"> *          不见满街漂亮妹，哪个归得程序员？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * _ooOoo_</span></span><br><span class="line"><span class="comment"> * o8888888o</span></span><br><span class="line"><span class="comment"> * 88" . "88</span></span><br><span class="line"><span class="comment"> * (| -_- |)</span></span><br><span class="line"><span class="comment"> *  O\ = /O</span></span><br><span class="line"><span class="comment"> * ___/`---'\____</span></span><br><span class="line"><span class="comment"> * .   ' \\| |// `.</span></span><br><span class="line"><span class="comment"> * / \\||| : |||// \</span></span><br><span class="line"><span class="comment"> * / _||||| -:- |||||- \</span></span><br><span class="line"><span class="comment"> * | | \\\ - /// | |</span></span><br><span class="line"><span class="comment"> * | \_| ''\---/'' | |</span></span><br><span class="line"><span class="comment"> * \ .-\__ `-` ___/-. /</span></span><br><span class="line"><span class="comment"> * ___`. .' /--.--\ `. . __</span></span><br><span class="line"><span class="comment"> * ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span></span><br><span class="line"><span class="comment"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment"> * \ \ `-. \_ __\ /__ _/ .-` / /</span></span><br><span class="line"><span class="comment"> * ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment"> * `=---='</span></span><br><span class="line"><span class="comment"> * .............................................</span></span><br><span class="line"><span class="comment"> *           佛曰：bug 泛滥，我已瘫痪！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="标识符注意"><a href="#标识符注意" class="headerlink" title="标识符注意"></a>标识符注意</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        所有标识符都应以字母（A-Z或者a-z），美元符（&amp;）或者下划线（_）开始</span></span><br><span class="line"><span class="comment">        首字母之后可以是字母（A-Z或者a-z），美元符（&amp;）或者下划线（_）或数字的任何字符组合</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">Hello</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">$Hello</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">_Hello</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">_1</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line"><span class="comment">//        String _# = "Nieqianlong";</span></span><br><span class="line"><span class="comment">//        String _% = "Nieqianlong";</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String 1Hello = "Nieqianlong";</span></span><br><span class="line"><span class="comment">//        String #Hello = "Nieqianlong";</span></span><br><span class="line"><span class="comment">//        String *Hello = "Nieqianlong";</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能使用关键字作为变量名或方法名</span></span><br><span class="line">        <span class="comment">// 标识符是大小写敏感的!!!</span></span><br><span class="line"><span class="comment">//        String class = "Nieqianlong";</span></span><br><span class="line">        <span class="comment">// 合法标识符举例：age、&amp;salary、_value、__1_value</span></span><br><span class="line">        <span class="comment">// 非法标识符举例：123abc、-salary、#abc</span></span><br><span class="line">        <span class="comment">//可以使用中文命名，但是一般不建议这样去用，也不建议用拼音，很Low</span></span><br><span class="line">        String 王者荣耀 = <span class="string">"百星王者"</span>;</span><br><span class="line">        System.out.println(王者荣耀);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mingzi</span> <span class="operator">=</span> <span class="string">"Nieqianlong"</span>;</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Chapter-02"><a href="#Chapter-02" class="headerlink" title="Chapter 02"></a>Chapter 02</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="Java是强类型语言"><a href="#Java是强类型语言" class="headerlink" title="Java是强类型语言"></a>Java是强类型语言</h3><ul><li>要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</li></ul><h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><ul><li>基本类型(primitive type)</li><li>引用类型(reference type)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 整数</span></span><br><span class="line"><span class="comment">//        String a = 10;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">"Hello"</span>;</span><br><span class="line"><span class="comment">//        int num = "Hello";</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 八大基本数据类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 最常用</span></span><br><span class="line"><span class="comment">//        byte num2 = 200;</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">40L</span>; <span class="comment">//Long类型要在数字后边加L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 浮点数</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">50.1F</span>; <span class="comment">// float类型要在数字后面加上一个F</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">3.141592653589793238462643</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">'A'</span>;</span><br><span class="line"><span class="comment">//        char name = '聂千龙';</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">name1</span> <span class="operator">=</span> <span class="string">'聂'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符串,String不是关键字，而是类</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">namea</span> <span class="operator">=</span> <span class="string">"聂千龙"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔值：是非</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 整数拓展     进制      二进制0b     十进制    八进制0     十六进制0x</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;   <span class="comment">//八进制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">0x10</span>;  <span class="comment">//十六进制  A~F</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(<span class="string">"//=========================================================="</span>);</span><br><span class="line">        <span class="comment">//==================================================================</span></span><br><span class="line">        <span class="comment">// 浮点数拓展   银行业务怎么表示？</span></span><br><span class="line">        <span class="comment">// BigDecimal</span></span><br><span class="line">        <span class="comment">//==================================================================</span></span><br><span class="line">        <span class="comment">//float 有限  离散  舍入误差    大约  接近但不等于</span></span><br><span class="line">        <span class="comment">//double</span></span><br><span class="line">        <span class="comment">// 最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">// 最好完全避免使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">// 最好完全避免使用浮点数进行比较</span></span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1f</span>; <span class="comment">//0.1</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">1.0</span>/<span class="number">10</span>;  <span class="comment">//0.1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(f == d);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(d);</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">21313131311313313f</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">d2</span> <span class="operator">=</span> d1 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(d1 == d2);</span><br><span class="line">        System.out.println(<span class="string">"//=========================================================="</span>);</span><br><span class="line">        <span class="comment">//==================================================================</span></span><br><span class="line">        <span class="comment">// 字符拓展</span></span><br><span class="line">        <span class="comment">//==================================================================</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">'中'</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c1); <span class="comment">//强制类型转换</span></span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c2); <span class="comment">//强制类型转换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有的字符本质还是数字</span></span><br><span class="line">        <span class="comment">// 编码 Unicode 2字节 65536 Excel 2^16 = 65536</span></span><br><span class="line">        <span class="comment">// U0000 UFFFF</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">'\u0061'</span>;</span><br><span class="line">        System.out.println(c3); <span class="comment">//a</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转义字符</span></span><br><span class="line">        <span class="comment">// \t   制表符</span></span><br><span class="line">        <span class="comment">// \n   换行</span></span><br><span class="line">        System.out.println(<span class="string">"Hello\tWorld!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello\nWorld!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象 从内存分析</span></span><br><span class="line">        System.out.println(<span class="string">"//=========================================================="</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Hello,world!"</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">"Hello,world!"</span>);</span><br><span class="line">        System.out.println(sa == sb);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="string">"Hello,world!"</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sd</span> <span class="operator">=</span> <span class="string">"Hello,world!"</span>;</span><br><span class="line">        System.out.println(sc == sd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔值拓展</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">true</span>){}     <span class="comment">// 新手</span></span><br><span class="line">        <span class="keyword">if</span> (flag){}     <span class="comment">// 老手</span></span><br><span class="line">        <span class="comment">// Less is More!    代码要精简已读</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>由于Java是强类型语言，所以要进行有些运算的时候，需要用到类型转换。</li></ul><p>低    ———————————————————————————&gt;    高</p><p>byte , short , char -&gt; int -&gt; long -&gt; float -&gt; double</p><ul><li><p>运算中，不同类型的数据先转换为同一类型，然后再运算。</p></li><li><p>强制类型转换</p></li><li>自动类型转换</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 强制转换     (类型)变量名     高-低</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i;   <span class="comment">//内存溢出</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动类型转换   低-高</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span>  <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">        1、不能对布尔值进行转换</span></span><br><span class="line"><span class="comment">        2、不能把对象类型转换为不相干的类型</span></span><br><span class="line"><span class="comment">        3、再把高容量转换到低容量的时候，强制转换</span></span><br><span class="line"><span class="comment">        4、转换的时候可能存在内存溢出，或者精度问题！</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">        System.out.println((<span class="type">int</span>)<span class="number">23.7</span>);      <span class="comment">// 23</span></span><br><span class="line">        System.out.println((<span class="type">int</span>)-<span class="number">45.89f</span>);   <span class="comment">// -45</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================"</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> d + <span class="number">1</span>;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">        System.out.println((<span class="type">char</span>)e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 操作比较大的数的时候，注意溢出问题</span></span><br><span class="line">        <span class="comment">// JDK7新特性，数字之间可以用下划线分割</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">1_000_000_000</span>;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> money * year;   <span class="comment">//-1474836480，计算的时候溢出了</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total2</span> <span class="operator">=</span> money * year; <span class="comment">//默认是int，转换前已经溢出了</span></span><br><span class="line">        System.out.println(total);</span><br><span class="line">        System.out.println(total2);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">total3</span> <span class="operator">=</span> money * ((<span class="type">long</span>)year);</span><br><span class="line">        System.out.println(total3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>变量就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明其类型</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和<strong>作用域</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value] [{,varName[=value]}];</span><br><span class="line"><span class="comment">// 数据类型 变量名 = 值；可以用逗号隔开来声明多个同类型的量</span></span><br></pre></td></tr></tbody></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>每个变量都有类型，类型可以是基本类型，也可以说是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><ul><li>类变量</li><li>实例变量</li><li>局部变量</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_07</span> {</span><br><span class="line">    <span class="comment">// 类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span> <span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性：变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例变量：从属于对象；如果不进行初始化，会变成这个类型的默认值 0 0.0</span></span><br><span class="line">    <span class="comment">// 布尔值：默认是false</span></span><br><span class="line">    <span class="comment">// 除了基本类型，其余的都是null；</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 局部变量；必须声明和初始化值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量类型  变量名字 = new Demo_07</span></span><br><span class="line">        <span class="type">Demo_07</span> <span class="variable">demo_07</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_07</span>();</span><br><span class="line">        System.out.println(demo_07.age);</span><br><span class="line">        System.out.println(demo_07.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类变量 static</span></span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>{</span><br><span class="line"><span class="comment">//        System.out.println(i);</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>常量(Constant)：初始化(initialize)后不能改变值！不会变动的值。</li><li>所谓的常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 常量名 = 值;</span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li>常量名一般用大写字符。</li></ul><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><ul><li>所有变量、方法、类名：<strong>见名知义</strong></li><li>类成员变量：首字母小写和驼峰原则：monthSalary</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Man,GoodMan</li><li>方法名：首字母小写和驼峰原则：run(),runRun()</li><li></li></ul><h1 id="Chapter-03"><a href="#Chapter-03" class="headerlink" title="Chapter 03"></a>Chapter 03</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li>算数运算符：+, -, *, /, %, ++, —</li><li>赋值运算符：=</li><li>关系运算符：&gt;, &lt;, &gt;=, &lt;=, ==, !=, instanceof</li><li>逻辑运算符：&amp;&amp;, ||, !</li><li>位运算符：&amp;, |, ^, ~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</li><li>条件运算符：? :</li><li>扩展赋值运算符：+=, -=, *=, /=</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二元运算符</span></span><br><span class="line">      <span class="comment">//Ctrl + D：复制当前行到下一行</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">      System.out.println(a+b);</span><br><span class="line">      System.out.println(a-b);</span><br><span class="line">      System.out.println(a*b);</span><br><span class="line">      System.out.println(a/(<span class="type">double</span>)b);</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">123123123123123L</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">      <span class="type">short</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">      System.out.println(a+b+c+d);    <span class="comment">//Long</span></span><br><span class="line">      System.out.println(b+c+d);      <span class="comment">//Int</span></span><br><span class="line">      System.out.println(c+d);        <span class="comment">//Short</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 关系运算符返回的结果：  正确，错误   布尔值</span></span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 取余，模运算</span></span><br><span class="line">      System.out.println(c%a); <span class="comment">// c / a    21 / 10 = 2 ... 1</span></span><br><span class="line"></span><br><span class="line">      System.out.println(a&gt;b);</span><br><span class="line">      System.out.println(a&lt;b);</span><br><span class="line">      System.out.println(a==b);</span><br><span class="line">      System.out.println(a!=b);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ++   --  自增，自减   一元运算符</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a++; <span class="comment">// 执行完这行代码后，先给b赋值，再自增</span></span><br><span class="line">      <span class="comment">// a++     a = a + 1</span></span><br><span class="line">      System.out.println(a);</span><br><span class="line">      <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++a; <span class="comment">// 执行完这行代码前，再自增，先给c赋值</span></span><br><span class="line">      <span class="comment">// ++a     a = a + 1</span></span><br><span class="line"></span><br><span class="line">      System.out.println(a);</span><br><span class="line">      System.out.println(b);</span><br><span class="line">      System.out.println(c);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 幂运算 2^3  2*2*2 = 8   很多运算，我们会使用一些工具类来操作</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">      System.out.println(pow);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//  与（and）   或（or）   非（取反）</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span>  <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a &amp;&amp; b:"</span>+(a &amp;&amp; b));</span><br><span class="line">        <span class="comment">// 逻辑与运算：两个变量都为真，结果才为true</span></span><br><span class="line">        System.out.println(<span class="string">"a || b:"</span>+(a || b));</span><br><span class="line">        <span class="comment">// 逻辑或运算：两个变量有一个为真，结果才为true</span></span><br><span class="line">        System.out.println(<span class="string">"!(a &amp;&amp; b):"</span>+!(a &amp;&amp; b));</span><br><span class="line">        <span class="comment">// 如果是真，则为假；如果是假，则为真</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 短路运算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">d</span> <span class="operator">=</span> (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>); <span class="comment">//c&lt;4为false，短路，不再运行后面的代码，所以c还是5</span></span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位运算符</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_06</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A = 0011 1100</span></span><br><span class="line"><span class="comment">        B = 0000 1101</span></span><br><span class="line"><span class="comment">        -------------------------</span></span><br><span class="line"><span class="comment">        A&amp;B = 0000 1100</span></span><br><span class="line"><span class="comment">        A|B = 0011 1101</span></span><br><span class="line"><span class="comment">        A^B = 0011 0001</span></span><br><span class="line"><span class="comment">        ~B  = 1111 0010</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        2*8 = 16    2*2*2*2</span></span><br><span class="line"><span class="comment">        &lt;&lt;      *2</span></span><br><span class="line"><span class="comment">        &gt;&gt;      /2</span></span><br><span class="line"><span class="comment">        0000 0000   0</span></span><br><span class="line"><span class="comment">        0000 0001   1</span></span><br><span class="line"><span class="comment">        0000 0010   2</span></span><br><span class="line"><span class="comment">        0000 0011   3</span></span><br><span class="line"><span class="comment">        0000 0100   4</span></span><br><span class="line"><span class="comment">        0000 1000   8</span></span><br><span class="line"><span class="comment">        0001 0000   16</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_08</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// x ? y : z</span></span><br><span class="line">        <span class="comment">// 如果x == ture，结果为y，否则为z</span></span><br><span class="line"><span class="comment">//        int score = 80;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> score &lt; <span class="number">60</span> ? <span class="string">"不及格"</span> : <span class="string">"及格"</span>;</span><br><span class="line">        System.out.println(type);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><ul><li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。</li><li>包语句的语法格式为：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg[. pkg2[. pkg3...]];</span><br></pre></td></tr></tbody></table></figure><ul><li>包就是文件夹</li><li><font color="red"><strong>一般利用公司域名倒置作为包名</strong></font>cn.nieqianlong.www</li><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用”import”语句可以完成此功能</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> packae1[. package2...].(classname|*);</span><br><span class="line"><span class="keyword">import</span> cn.nieqianlong.base.Demo_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入这个包下所有的类！</span></span><br><span class="line"><span class="keyword">import</span> cn.nieqianlong.base.*;</span><br></pre></td></tr></tbody></table></figure><h2 id="Java-Doc"><a href="#Java-Doc" class="headerlink" title="Java Doc"></a>Java Doc</h2><ul><li>javadoc命令是用来生成自己API文档的</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.base;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Nieqianlong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doc</span> {</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Nieqianlong</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>参数信息：</li><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul><p><img src="../../../%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%A1%B5/%E5%9B%BE%E5%BA%8A/java02.png" alt="cmd生成JavaDoc"></p><p><a href="https://blog.csdn.net/m0_47176679/article/details/125381816">生成JavaDoc的两种方法</a></p><h1 id="Chapter04"><a href="#Chapter04" class="headerlink" title="Chapter04"></a>Chapter04</h1><h2 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h2><ul><li><strong>java.util.Scanner，<font color="red">可以通过Scanner类来获取用户的输入</font></strong></li><li>基本语法：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></tbody></table></figure><ul><li>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</li></ul><ul><li><p>next():</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next()方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>4、<strong><font color="red">next()不能得到带有空格的字符串。</font></strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用next方法接收："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()){</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">"输入的内容为："</span>+str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 凡是IO流的类如果不关闭会一直占用资源，要养成好习惯用完就关掉</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p>nextLine():</p><ul><li>1、以Enter为结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用nextLine方式接收："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextLine()){</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"输入的内容为："</span>+str);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入数据："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"输入的内容为："</span>+str);</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 计算输入了多少数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过循环判断是否还有输入，并在里面对每一次进行求和统计</span></span><br><span class="line">        System.out.println(<span class="string">"请输入第1个数字："</span>);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble()){</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            m = m + <span class="number">1</span>;  <span class="comment">//m++</span></span><br><span class="line">            sum = sum + x;</span><br><span class="line">            System.out.println(<span class="string">"你已输入了"</span> + m + <span class="string">"个数据，当前总和为："</span> + sum);</span><br><span class="line">            System.out.println(<span class="string">"请输入第"</span>+(m+<span class="number">1</span>)+<span class="string">"个数字："</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(m + <span class="string">"个数的和为："</span> + sum);</span><br><span class="line">        System.out.println(m + <span class="string">"个数的平均数是"</span> + (sum /m));</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><ul><li>Java的最基本结构就是顺序结构，除非特别指明，否则就按顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li><li>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤组成的，<strong><font color="red">它是任何一个算法都离不开的一种基本算法结构。</font></strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sequence</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Hello1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello4"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Hello5"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><ul><li>if单选择结构</li><li>if双选择结构</li><li>if多选择结构</li><li>嵌套的if结构</li><li>switch多选择结构</li></ul><h3 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h3><ul><li><p>我们很多时候需要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中用if语句来表示</p></li><li><p>语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式){</span><br><span class="line">    <span class="comment">// 如果布尔表达式为true将执行的语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入内容："</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">// equals:判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">"Hello"</span>)){</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"End"</span>);</span><br><span class="line">        scanner.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h3><ul><li>语法：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式){</span><br><span class="line">    <span class="comment">// 如果布尔表达式为true将执行的语句</span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">// 如果布尔表达式为false将执行的语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 考试分数大于60分就是及格，小于60分就是不及格</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入成绩："</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score&gt;=<span class="number">60</span>){</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><ul><li>语法：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>){</span><br><span class="line">    <span class="comment">// 如果布尔表达式 1为true将执行的语句</span></span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>){</span><br><span class="line">    <span class="comment">// 如果布尔表达式 2为true将执行的语句</span></span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>){</span><br><span class="line">    <span class="comment">// 如果布尔表达式 3为true将执行的语句</span></span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">// 如果以上布尔表达式都不为true将执行的语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IfDemo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 考试分数大于60分就是及格，小于60分就是不及格</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        if 语句至多有 1 个 else 语句，else语句在所有的else if 语句之后。</span></span><br><span class="line"><span class="comment">        if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</span></span><br><span class="line"><span class="comment">        一旦其中的一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"请输入成绩："</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score == <span class="number">100</span>){</span><br><span class="line">            System.out.println(<span class="string">"恭喜满分"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">90</span> &amp;&amp; score&lt;<span class="number">100</span>) {</span><br><span class="line">            System.out.println(<span class="string">"A级"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>) {</span><br><span class="line">            System.out.println(<span class="string">"B级"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>) {</span><br><span class="line">            System.out.println(<span class="string">"C级"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>) {</span><br><span class="line">            System.out.println(<span class="string">"D级"</span>);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (score&lt;<span class="number">60</span> &amp;&amp; score&gt;=<span class="number">0</span>) {</span><br><span class="line">            System.out.println(<span class="string">"不及格"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"成绩不合法"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h3><ul><li><p>使用嵌套的 if … else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。你可以像 if 语句一样嵌套 else if … else 。</p></li><li><p>语法：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>){</span><br><span class="line">    <span class="comment">// 如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">    <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>){</span><br><span class="line">        <span class="comment">// 如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h3><ul><li><p>多选择结构还有一个实现方式就是switch case语句。</p></li><li><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每一个值称为一个分支。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression){</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选</span></span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 可选</span></span><br><span class="line">    <span class="comment">// 你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// 可选</span></span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>switch case语句中的变量类型可以是：</strong></p><ul><li>byte、short、int或者char。</li><li><font color="red">从Java SE 7 开始</font></li><li><font color="red">switch 支持字符串String类型了</font></li><li>同时 case 标签必须为字符串常量或者字面量。</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">'F'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(grade){</span><br><span class="line">            <span class="keyword">case</span><span class="string">'A'</span>:</span><br><span class="line">                System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">            <span class="keyword">case</span><span class="string">'B'</span>:</span><br><span class="line">                System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">            <span class="keyword">case</span><span class="string">'C'</span>:</span><br><span class="line">                System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">            <span class="keyword">case</span><span class="string">'D'</span>:</span><br><span class="line">                System.out.println(<span class="string">"再接再厉"</span>);</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">            <span class="keyword">case</span><span class="string">'E'</span>:</span><br><span class="line">                System.out.println(<span class="string">"挂科"</span>);</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 可选</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"未知等级"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwitchDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"肥龙"</span>;</span><br><span class="line">        <span class="comment">// JDK7的新特性，表达式结果可以是字符串！！！</span></span><br><span class="line">        <span class="comment">// 字符的本质还是数字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反编译  java---class（字节码文件）---反编译（IDEA）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (name){</span><br><span class="line">            <span class="keyword">case</span><span class="string">"肥龙"</span>:</span><br><span class="line">                System.out.println(<span class="string">"肥龙"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"聂千龙"</span>:</span><br><span class="line">                System.out.println(<span class="string">"聂千龙"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"弄啥嘞！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ul><li>while循环</li><li>do…while循环</li><li>for循环</li><li>在Java5中引入了一种主要用于数组增强型的for循环</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li><p>while是最基本的循环，它的结构为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式){</span><br><span class="line">    <span class="comment">// 循环内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>只要布尔表达式为true，循环就会一直执行下去</p></li><li><font color="red">我们大多数情况是会让循环停止下来的，我们需要一个表达式失效的方式来结束循环。</font></li><li><p>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</p></li><li><p>循环条件一直为true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环。会影响程序性能或者造成程序卡死崩溃！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出1~100</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i&lt;<span class="number">100</span>){</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>){</span><br><span class="line">            <span class="comment">// 等待客户端连接</span></span><br><span class="line">            <span class="comment">// 定时检查</span></span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 计算1+2+3+...+100=?</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=<span class="number">100</span>){</span><br><span class="line">            sum = sum + i;</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 高斯算法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        sum2 = ((<span class="number">1</span>+<span class="number">100</span>))*(i/<span class="number">2</span>);</span><br><span class="line">        System.out.println(sum2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><ul><li><p>对于while语句而言，如果条件不满足，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p></li><li><p>do…while循环和while循环相似，不同的是，do…while循环至少会执行一次。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>{</span><br><span class="line">    <span class="comment">// 代码语句</span></span><br><span class="line">}<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></tbody></table></figure></li><li><p>while 和 do-while的区别：</p><ul><li>while先判断后执行。do-while是先执行后判断！</li><li>Do…while总是保证循环体会被至少执行一次！这是他们的主要差别。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a&lt;<span class="number">0</span>){</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a++;</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        <span class="keyword">do</span>{</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a++;</span><br><span class="line">        }<span class="keyword">while</span>(a&lt;<span class="number">0</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a><font color="red">For循环</font></h3><ul><li><p>虽然所有循环结构都可以用while或者do…while表示，但Java提供了另一种语句——for循环，使一些循环结构变得更加简单。</p></li><li><p>for循环语句是支持迭代的一种通用结构，<font color="red">是最有效、最灵活的循环结构。</font></p></li><li><p>for循环执行的次数是在执行前就确定的。语句格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新){</span><br><span class="line">    <span class="comment">// 代码语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 初始化条件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (a&lt;=<span class="number">100</span>){ <span class="comment">// 条件判断</span></span><br><span class="line">            System.out.println(a); <span class="comment">// 循环体</span></span><br><span class="line">            a += <span class="number">2</span>; <span class="comment">//迭代</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"while循环结束"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++){  <span class="comment">//100.for</span></span><br><span class="line">            System.out.println(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"for循环结束"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        关于 for 循环有以下几点说明：</span></span><br><span class="line"><span class="comment">        最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</span></span><br><span class="line"><span class="comment">        然后，检测布尔表达式的值。如果为 true ，循环体被执行。如果 false ，循环终止，开始执行循坏体后面的语句。执行一次循坏后，</span></span><br><span class="line"><span class="comment">        再次检测布尔表达式。循环执行上面的过程。</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 计算0到100之间的奇数和偶数的和</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">oddSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">evenSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>){</span><br><span class="line">                oddSum += i;</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                evenSum += i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"奇数的和："</span>+oddSum);</span><br><span class="line">        System.out.println(<span class="string">"偶数的和："</span>+evenSum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 用while或for循环输出1-1000之间能被5整除的数，并且每行输出3个</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">15</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// printlin 换行</span></span><br><span class="line">        <span class="comment">// print 不换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">1000</span>){</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">3</span>){</span><br><span class="line">                System.out.println();</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><ul><li><p>Java增强型for循环语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句：表达式){</span><br><span class="line">    <span class="comment">// 代码句子</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p></li><li><p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] numbers = {<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>}; <span class="comment">// 定义了一个数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        <span class="comment">// 遍历数组的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:numbers){</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break    continue"></a>break    continue</h3><ul><li>break 在任何循环语句的主体部分，均可用 break 控制循环的流程。 break 用于强行退出循环，不执行循环中剩余的语句。( break 语句也在 switch 语句中使用）</li><li>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</li></ul><ul><li>关于 goto 关键字<ul><li>goto 关键字很早就在程序设计语言中出现。尽管 goto 仍是 Java 的一个保留字，但并未在语言中得到正式使用； Java 没有 goto 。然而，在 break 和 continue 这两个关键字的身上，我们仍然能看出一些 goto 的影子﹣-﹣带标签的 break 和 continue 。</li><li>“标签”是指后面跟一个冒号的标识符，例如： label :</li><li>对 Java 来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另个循环，由于 break 和 continue 关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BreakDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>){</span><br><span class="line">            i++;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">30</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"123"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContinueDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;<span class="number">100</span>){</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LabelDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 打印101~150之间所有的质数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        outer:<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">101</span>; i &lt; <span class="number">150</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j&lt; i/<span class="number">2</span>; j++){</span><br><span class="line">                <span class="keyword">if</span>(i % j == <span class="number">0</span>){</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            System.out.print(i+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 打印三角形    5行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法一：</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j &gt;= i; j--) {</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++) {</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) {</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法二：</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j &gt; i; j--) {</span><br><span class="line">                System.out.print(<span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; (<span class="number">2</span>*i-<span class="number">1</span>); j++) {</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Chapter-04"><a href="#Chapter-04" class="headerlink" title="Chapter 04"></a>Chapter 04</h1><h2 id="Java方法详解"><a href="#Java方法详解" class="headerlink" title="Java方法详解"></a>Java方法详解</h2><h3 id="何谓方法？"><a href="#何谓方法？" class="headerlink" title="何谓方法？"></a>何谓方法？</h3><ul><li><p>System.out.printlin()</p><p>类.对象.方法</p></li><li><p>Java方法是语句的合集，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，<font color="red">就是一个方法只能完成一个功能，这样利于我们后期扩展。</font></li><li>方法的命名规则：<font color="red">首字母小写和驼峰原则：run(),runRun()</font></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="comment">// main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        test();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.print(i+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">15</span>==<span class="number">0</span>){</span><br><span class="line">                System.out.println();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><ul><li><p>Java的方法类似于其他语言的函数，是一段<font color="red">用来完成特殊功能的代码片段</font>，一般情况下，定义一个方法包含以下语法：</p></li><li><p><font color="red">方法包含一个方法头和一个方法体。</font>下面是一个方法的所有部分：</p><ul><li><p><font color="red">修饰符</font>：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</p><ul><li><font color="red">返回值类型</font>：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。</li></ul></li><li><p><font color="red">方法名</font>：是方法的实际名称。方法名和参数表共同构成方法签名。</p></li><li><p><font color="red">参数类型</font>：参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p><p>形式参数：在方法被调用时用于接收外界输入的数据。</p><p>实参：调用时实际传给方法的数据。</p></li><li><p><font color="red">方法体</font>：方法体包含具体的语句，定义该方法的功能。</p></li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符返回值类型 方法名(参数类型 参数名){</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><ul><li><p>调用方法：对象名.方法名(实参列表)</p></li><li><p>Java支持两种调用方法，根据方法是否返回值来选择。</p></li><li><p>当方法返回一个值的时候，方法调用通常是被当做一个值。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">larger</span> <span class="operator">=</span> max(<span class="number">30</span>, <span class="number">40</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果方法返回值是void，方法调用一定是一条语句。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello,nieqianlong!"</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><font color="red" size="4">Java是值传递</font></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int max = max(10, 20);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> max(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1&gt;num2){</span><br><span class="line">            result = num1;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (num2&gt;num1) {</span><br><span class="line">            result = num2;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"num1==num2"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 终止方法</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li>重载就是在一个类中，有相同的函数名称，但是形参不同的函数。</li><li>方法的重载的规则：<ul><li>方法名称必须相同。</li><li>参数列表必须不同（个数不同、或类型不同、参数排列顺序不同等）。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足已成为方法的重载。</li></ul></li><li>实现理论：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int max = max(10, 20);</span></span><br><span class="line"><span class="comment">//        int max = max(10, 10);</span></span><br><span class="line"><span class="comment">//        double max = max(10.0, 20.0);</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> max(<span class="number">10.0</span>, <span class="number">10.0</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2)</span>{</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1&gt;num2){</span><br><span class="line">            result = num1;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (num2&gt;num1) {</span><br><span class="line">            result = num2;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"num1==num2"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 终止方法</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num1&gt;num2){</span><br><span class="line">            result = num1;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (num2&gt;num1) {</span><br><span class="line">            result = num2;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"num1==num2"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 终止方法</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="comment">// main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(sum2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span>{</span><br><span class="line">        <span class="keyword">return</span> a+b+c;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><ul><li>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++){</span><br><span class="line">            System.out.println(<span class="string">"args["</span>+i+<span class="string">"]:"</span>+args[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/16/yaXmWnsL42cqI6l.png" alt="命令行传参"></p><h3 id="可变参数（不定项参数）"><a href="#可变参数（不定项参数）" class="headerlink" title="可变参数（不定项参数）"></a>可变参数（不定项参数）</h3><ul><li>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号(…)。</li><li>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数必须在它之前声明。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Demo_04</span> <span class="variable">demo_04</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo_04</span>();</span><br><span class="line">        demo_04.test(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        printMax(<span class="number">34</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="title class_">double</span>[]{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>});</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>... i)</span>{</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">(<span class="type">double</span>...numbers)</span>{</span><br><span class="line">        <span class="keyword">if</span>(numbers.length==<span class="number">0</span>){</span><br><span class="line">            System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序!</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt; result){</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"The max value is "</span> + result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>递归就是：A方法调用A方法！就是自己调用自己</li><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需要少量的程序就可描述出解题过程所需的多次重复计算，大大减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。</li><li><font color="red">递归结构包括两个部分：</font>- <font color="red">递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</font>- <font color="red">递归体：什么时候需要调用自身方法。</font></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_06</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(f(<span class="number">10</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1! 1</span></span><br><span class="line">    <span class="comment">// 2! 2*1</span></span><br><span class="line">    <span class="comment">// 5! 5*4*3*2*1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2  2*f(1)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Java实现简易计算器"><a href="#Java实现简易计算器" class="headerlink" title="Java实现简易计算器"></a>Java实现简易计算器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_07</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">"输入y继续，输入n退出"</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str.equals(<span class="string">"y"</span>)) {</span><br><span class="line">                System.out.println(<span class="string">"请输入第一个数字"</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">numb1</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"请输入运算符号"</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">operator</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"请输入第二个数字"</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">numb2</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (operator) {</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                        add(numb1, numb2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                        subtract(numb1, numb2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                        multiply(numb1, numb2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                        divide(numb1, numb2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                scanner.close();</span><br><span class="line">                System.out.println(<span class="string">"正在退出!!"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span> <span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>{</span><br><span class="line">            System.out.println(<span class="string">"numb 1 + numb 2 = "</span> + (a + b));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subtract</span> <span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>{</span><br><span class="line">            System.out.println(<span class="string">"numb 1 - numb 2 = "</span> + (a - b));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">multiply</span> <span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>{</span><br><span class="line">            System.out.println(<span class="string">"numb 1 * numb 2 = "</span> + a * b);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">divide</span> <span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span>{</span><br><span class="line">            System.out.println(<span class="string">"numb 1 / numb 2 = "</span> + a / b);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h1 id="Chapter-05"><a href="#Chapter-05" class="headerlink" title="Chapter 05"></a>Chapter 05</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问他们。</li></ul><h3 id="数组声明创建"><a href="#数组声明创建" class="headerlink" title="数组声明创建"></a>数组声明创建</h3><ul><li><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;<span class="comment">// 首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayReVar[];<span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>Java语言使用new操作符来创建数组，语法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayReVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br></pre></td></tr></tbody></table></figure></li><li><p>数组的元素是通过索引访问的，数组索引从0开始。</p></li><li><p>获取数组长度：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrays.length</span><br></pre></td></tr></tbody></table></figure></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_01</span> {</span><br><span class="line">    <span class="comment">// 变量的类型     变量的名字   =   变量的值</span></span><br><span class="line">    <span class="comment">// 数组类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] nums; <span class="comment">// 1、声明一个数组</span></span><br><span class="line">        <span class="type">int</span> nums2[];</span><br><span class="line"></span><br><span class="line">        nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">// 2、创建一个数组，这里边可以存放10个int类型的数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] nums3 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3、给数组元素中赋值</span></span><br><span class="line">        nums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        nums[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        nums[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        nums[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        nums[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        nums[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        nums[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        nums[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        nums[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(nums[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算所有元素的和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 获取数组长度：  arrays.length</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        }</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="https://s2.loli.net/2022/08/18/MqOZJUWT5mFAN34.png" alt="内存分析"></p><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_02</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 静态初始化：创建 + 赋值</span></span><br><span class="line">        <span class="type">int</span>[] a = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>};</span><br><span class="line">        Man[] men = {<span class="keyword">new</span> <span class="title class_">Man</span>(), <span class="keyword">new</span> <span class="title class_">Man</span>()};</span><br><span class="line">        System.out.println(a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态初始化：包含默认初始化</span></span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">        b[<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        System.out.println(b[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(b[<span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数组的四个基本点"><a href="#数组的四个基本点" class="headerlink" title="数组的四个基本点"></a>数组的四个基本点</h3><ul><li><p>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</p></li><li><p>其元素必须是相同类型，不允许出现混合类型。</p></li><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</p></li><li><p>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。</p><p>数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<font color="red">数组对象本身是在堆中的。</font></p></li></ul><h3 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h3><ul><li><p>普通的For循环</p></li><li><p>For-Each 循环（主要用于打印数组元素）</p></li><li>数组作方法入参</li><li>数组作返回值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] arrays = {<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK1.5 没有下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> array : arrays) {</span><br><span class="line">            System.out.println(array);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">        printArray(arrays);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">        printArray(reverse(arrays));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) {</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arrays){</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反转的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = result.length-<span class="number">1</span>; i &lt; arrays.length ; i++,j--) {</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><ul><li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组。</p></li><li><p>二维数组</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure></li><li><p>解析：以上二维数组a可以看成一个两行五列的数组。</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//[4][2]</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1,2     array[0]</span></span><br><span class="line"><span class="comment">            2,3     array[1]</span></span><br><span class="line"><span class="comment">            3,4     array[2]</span></span><br><span class="line"><span class="comment">            4,5     array[3]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span>[][] array = {{<span class="number">1</span>,<span class="number">2</span>},{<span class="number">2</span>,<span class="number">3</span>},{<span class="number">3</span>,<span class="number">4</span>},{<span class="number">4</span>,<span class="number">5</span>}};</span><br><span class="line"></span><br><span class="line">        printArray(array[<span class="number">0</span>]);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        System.out.println(array[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        System.out.println(array[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        System.out.println(array.length);</span><br><span class="line">        System.out.println(array[<span class="number">0</span>].length);</span><br><span class="line">        System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) {</span><br><span class="line">                System.out.println(array[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) {</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h3><ul><li>数组类工具java.util.Arrays</li><li>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</li><li><font color="red">查看JDK帮助文档</font></li><li>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而“不用”使用对象来调用（注意：是“不用”不是“不能”）</li></ul><ul><li>通常具有以下常用功能：<ul><li>给数组赋值：通过fill方法。</li><li>对数组排序：通过sort方法，按升序。</li><li>比较数组：通过equals方法比较数组中元素值是否相等。</li><li>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_06</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] a ={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9090</span>,<span class="number">321</span>,<span class="number">54532</span>,<span class="number">23</span>,<span class="number">5</span>,<span class="number">56</span>};</span><br><span class="line">        System.out.println(a); <span class="comment">// [I@776ec8df</span></span><br><span class="line">        <span class="comment">// 打印数组元素</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.sort(a); <span class="comment">// 对数组进行排序：升序</span></span><br><span class="line">        printArray(a);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        Arrays.fill(a,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) {</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>){</span><br><span class="line">                System.out.print(<span class="string">"["</span>+a[i]+<span class="string">", "</span>);</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(i==a.length-<span class="number">1</span>){</span><br><span class="line">                System.out.print(a[i]+<span class="string">"]"</span>);</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                System.out.print(a[i]+<span class="string">", "</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_07</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] a = {<span class="number">1</span>,<span class="number">45</span>,<span class="number">68</span>,<span class="number">234</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">123</span>,<span class="number">54</span>};</span><br><span class="line">        <span class="type">int</span>[] sort = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="comment">// 1、比较数组中两个相邻的元素，如果第一个比第二个大，就交换他们；</span></span><br><span class="line">    <span class="comment">// 2、每次比较，都会产生一个最大或者最小的数字；</span></span><br><span class="line">    <span class="comment">// 3、下一轮则可少一次排序</span></span><br><span class="line">    <span class="comment">// 4、依次循环，直到结束。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array){</span><br><span class="line">        <span class="comment">// 临时变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="comment">// 内层循环，比较两个数，如果第一个比第二个大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) {</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>]&lt;array[j]){</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>这个算法的时间复杂度为<font color="red" size="5"><strong>O(n2)。</strong></font></p></li><li><p>优化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_07</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span>[] a = {<span class="number">1</span>,<span class="number">45</span>,<span class="number">68</span>,<span class="number">234</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">123</span>,<span class="number">54</span>};</span><br><span class="line">        <span class="type">int</span>[] sort = sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="comment">// 1、比较数组中两个相邻的元素，如果第一个比第二个大，就交换他们；</span></span><br><span class="line">    <span class="comment">// 2、每次比较，都会产生一个最大或者最小的数字；</span></span><br><span class="line">    <span class="comment">// 3、下一轮则可少一次排序</span></span><br><span class="line">    <span class="comment">// 4、依次循环，直到结束。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array){</span><br><span class="line">        <span class="comment">// 临时变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 外层循环，判断要走多少次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 内层循环，比较两个数，如果第一个比第二个大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length-<span class="number">1</span>-i; j++) {</span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>]&lt;array[j]){</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="literal">false</span>){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="稀疏数组（一种数据结构）"><a href="#稀疏数组（一种数据结构）" class="headerlink" title="稀疏数组（一种数据结构）"></a>稀疏数组（一种数据结构）</h3><ul><li>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</li><li>稀疏数组的处理方式是：<ul><li>记录数组一共有几行几列，有多少格不同值</li><li>把具有不同值的元素和行列值记录在一个小规模数组中，从而缩小程序的规模</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo_08</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 1、创建一个二维数组 11*11  0：没有棋子    1：黑棋    2：白棋</span></span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 输出原始数组</span></span><br><span class="line">        System.out.println(<span class="string">"输出原始数组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) {</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为稀疏数组保存</span></span><br><span class="line">        <span class="comment">// 获取有效值的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>){</span><br><span class="line">                    sum++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"有效值的个数："</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="type">int</span>[][]array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历二维数组，将非零的值，存放稀疏数组中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array1.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array1[i].length; j++) {</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j]!=<span class="number">0</span>){</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.length; i++) {</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>] + <span class="string">"\t"</span> +</span><br><span class="line">                    array2[i][<span class="number">1</span>] + <span class="string">"\t"</span> +</span><br><span class="line">                    array2[i][<span class="number">2</span>]);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"还原"</span>);</span><br><span class="line">        <span class="comment">// 1、读取稀疏数组</span></span><br><span class="line">        <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、给其中的元素还原值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++) {</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 3、打印</span></span><br><span class="line">        <span class="comment">// 输出还原数组</span></span><br><span class="line">        System.out.println(<span class="string">"输出还原数组"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array3) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) {</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Chapter-06"><a href="#Chapter-06" class="headerlink" title="Chapter 06"></a>Chapter 06</h1><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程 &amp; 面向对象"></a>面向过程 &amp; 面向对象</h3><ul><li>面向过程思想<ul><li>步骤清晰简单，第一步做什么，第二步做什么……</li><li>面向过程适合处理一些较为简单的问题</li></ul></li><li>面向对象思想<ul><li>物以类聚，<font color="red">分类</font>的思维模式，思考问题首先解决问题需要哪些分类，然后对这些分类进行单独思考。最后，才对某个分类下的细节进行面向过程的思索。</li><li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul></li><li><font color="red">对于描述复杂的事物，为了从宏观上把握、从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍需要面向过程的思路去处理。</font></li></ul><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象编程(Object-Oriented Programming, OOP)</li><li>面向对象编程的本质就是：<font color="red" size="5"><strong>以类的方式组织代码，以对象的组织（封装）数据</strong></font></li></ul><ul><li>抽象</li></ul><ul><li>三大特性：<ul><li><font color="red" size="5">**封装**</font></li><li><font color="red" size="5">**继承**</font></li><li><font color="red" size="5">**多态**</font></li></ul></li></ul><ul><li>从认识论角度考虑是先有对象后有类。对象，是具体的事物。类，是抽象的，是对对象的抽象。</li><li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li></ul><h3 id="回顾方法及加深"><a href="#回顾方法及加深" class="headerlink" title="回顾方法及加深"></a>回顾方法及加深</h3><ul><li>方法的定义<ul><li>修饰符</li><li>返回类型</li><li>break：跳出switch，结束循环和return区别</li><li>方法名：注意驼峰规则，见名知义</li><li>参数列表：（参数类型，参数名）…</li><li>异常抛出</li></ul></li><li>方法的调用：<ul><li>静态方法</li><li>非静态方法</li><li>形参和实参</li><li>值传递和引用传递</li><li>this关键字</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOError;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Demo_01 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="comment">// main 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符 返回值类型   方法名（...）{</span></span><br><span class="line"><span class="comment">        // 方法名</span></span><br><span class="line"><span class="comment">        return 返回值;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// return 结束方法，返回一个结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sayHello</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,world!"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b; <span class="comment">// 三元运算符</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">(String file)</span> <span class="keyword">throws</span> IOError{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_02</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 static</span></span><br><span class="line">    <span class="comment">// 非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 实例化这个类 new</span></span><br><span class="line">        <span class="comment">// 对象类型 对象名 = 对象值；</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和类一起加载的</span></span><br><span class="line"><span class="comment">//    public static void a(){</span></span><br><span class="line"><span class="comment">//        b();</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    // 类实例化 之后才存在</span></span><br><span class="line"><span class="comment">//    public void b(){</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"学生说话了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_03</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 实际参数和形式参数的类型要对应！</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> Demo_03.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>{</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"><span class="comment">// 值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_04</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">        Demo_04.change(a);</span><br><span class="line">        System.out.println(a); <span class="comment">// 1</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回值为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> a)</span>{</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"><span class="comment">// 引用传递：对象，本质还是值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_05</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(person.name); <span class="comment">// null</span></span><br><span class="line">        Demo_05.change(person);</span><br><span class="line">        System.out.println(person.name); <span class="comment">// 聂千龙</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person person)</span>{</span><br><span class="line">        <span class="comment">// person是一个对象，指向的 ---&gt; Person person = new Person();这是一个具体的人，可以改变属性！</span></span><br><span class="line">        person.name = <span class="string">"聂千龙"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了一个Person类，有一个属性：name</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>{</span><br><span class="line">    String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ul><li><font color="red">类是一种抽象的数据类型，他是对某一类事物整体描述/定义，但是并不能代表一个具体的事物。</font><ul><li>动物、植物、手机、电脑…</li><li>Person类、Pet类、Car类等，这些都是用来描述/定义某一类具体的事物应该具备的特点和行为</li></ul></li><li><font color="red">对象是抽象概念的具体实例</font><ul><li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体实例。</li><li>能够体现出特点，展现出功能的是具体的实例，而不是一个抽象的概念。</li></ul></li></ul><h3 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h3><ul><li><font color="red">使用new关键字创建对象</font></li><li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类的构造器的调用。</li><li>类的构造器也称为类的构造方法，是在进行创建对象的时候必须要调用的，并且构造器有以下两个特点：<ul><li>1、必须和类的名字相同</li><li>2、必须没有返回类型，也不能写void</li></ul></li><li><font color="red">构造器必须要掌握</font></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_02;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 类：抽象的，需要实例化</span></span><br><span class="line">        <span class="comment">// 类实例化后会返回一个自己的对象!</span></span><br><span class="line">        <span class="comment">// student对象就是一个Student类的具体实例！</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xiaoming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        xiaoming.name = <span class="string">"小明"</span>;</span><br><span class="line">        xiaoming.age = <span class="number">3</span>;</span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">        System.out.println(xiaoming.age);</span><br><span class="line"></span><br><span class="line">        xh.name = <span class="string">"小红"</span>;</span><br><span class="line">        xh.age = <span class="number">3</span>;</span><br><span class="line">        System.out.println(xh.name);</span><br><span class="line">        System.out.println(xh.age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_02;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="comment">// 属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">"在学习"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_02;</span><br><span class="line"><span class="comment">// java ---&gt; class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="comment">// 一个类即使什么也不写，它也会存在一个方法</span></span><br><span class="line">    <span class="comment">// 显示的定义构造器</span></span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化初始值</span></span><br><span class="line">    <span class="comment">//1、使用new关键字，必须是在调用构造器</span></span><br><span class="line">    <span class="comment">//2、用来初始化值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">"聂千龙"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造:一旦定义了有参构造，无参构造必须显示定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alt + insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // new 实例化了一个对象</span></span><br><span class="line"><span class="comment">        Person person = new Person("nieqianlong");</span></span><br><span class="line"><span class="comment">        System.out.println(person.name); //聂千龙</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        构造器：</span></span><br><span class="line"><span class="comment">            1、和类名相同</span></span><br><span class="line"><span class="comment">            2、没有返回值</span></span><br><span class="line"><span class="comment">        作用：</span></span><br><span class="line"><span class="comment">            1、new本质在调用构造器</span></span><br><span class="line"><span class="comment">            2、初始化对象的值</span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">            1、定义了有参构造后，如果想使用无参构造，显示的定义一个无参的构造</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            Alt + Insert</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><font color="red" size="5">快捷键：Alt + Insert</font><p><img src="https://s2.loli.net/2022/08/20/h6Xzq41PFIgtLau.png" alt="快捷键：Alt + Insert"></p><font color="red" size="5">选择参数创建有参构造器，如果创建无参构造器则选择"Select None"</font><h3 id="对象内存分析"><a href="#对象内存分析" class="headerlink" title="对象内存分析"></a>对象内存分析</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_03.Pet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Pet</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">        dog.name = <span class="string">"旺财"</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        System.out.println(dog.age);</span><br><span class="line"></span><br><span class="line">        <span class="type">Pet</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span> {</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"叫了一声"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2022/08/21/WNdv8R5JQpbnKPA.png" alt="对象内存分析"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_03.Pet;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1、类与对象：</span></span><br><span class="line"><span class="comment">        类是一个模板：抽象，对象是一个具体的实例</span></span><br><span class="line"><span class="comment">    2、方法：</span></span><br><span class="line"><span class="comment">        定义、调用！</span></span><br><span class="line"><span class="comment">    3、对象的引用：</span></span><br><span class="line"><span class="comment">        引用类型：   基本类型（8）</span></span><br><span class="line"><span class="comment">          对象是通过引用来操作的：栈 --&gt; 堆</span></span><br><span class="line"><span class="comment">    4、属性：字段Field 成员变量</span></span><br><span class="line"><span class="comment">        默认初始化：</span></span><br><span class="line"><span class="comment">            数字：0    0.0</span></span><br><span class="line"><span class="comment">            char：u0000</span></span><br><span class="line"><span class="comment">            boolean：false</span></span><br><span class="line"><span class="comment">            引用：null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        修饰符 属性类型 属性名 = 属性值！</span></span><br><span class="line"><span class="comment">    5、对象的创建和使用：</span></span><br><span class="line"><span class="comment">        - 必须使用new 关键字创建对象，构造器   Person nieqianlong = new Person();</span></span><br><span class="line"><span class="comment">        - 对象的属性 nieqianlong.name</span></span><br><span class="line"><span class="comment">        - 对象的方法 nieqianlong.sleep()</span></span><br><span class="line"><span class="comment">    6、类：</span></span><br><span class="line"><span class="comment">        静态的属性   属性</span></span><br><span class="line"><span class="comment">        动态的行为   方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>该露的露，该藏的藏<ul><li>我们程序设计要追求<font color="red">“高内聚，低耦合”</font>。高内聚就是类的内部数据操作细节自己完成，不允许外部干涉；低耦合：仅暴露少部分方法给外部使用。</li></ul></li><li>封装（数据的隐藏）<ul><li>通常，应禁止直接访问一个对象中数据的实际表示，而通过操作接口来访问，这称为信息隐藏。</li></ul></li><li><font color="red">私有属性，get/set</font></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_04.Student;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.提高程序的安全性，保护数据</span></span><br><span class="line"><span class="comment">    2.隐藏代码的实现细节</span></span><br><span class="line"><span class="comment">    3.统一接口</span></span><br><span class="line"><span class="comment">    4.提高了系统的可维护性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">"聂千龙"</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line"></span><br><span class="line">        s1.setAge(<span class="number">999</span>); <span class="comment">// 不合法的</span></span><br><span class="line">        System.out.println(s1.getAge());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_04;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类    private:私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">// 学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex; <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一些可以操作这个属性的方法！</span></span><br><span class="line">    <span class="comment">// 提供一些public的get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 获得这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// set 给这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> {</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> {</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> {</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">120</span> || age &lt; <span class="number">0</span>){ <span class="comment">// 不合法的</span></span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">3</span>;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// Alt + Insert 快捷键自动生成get、set方法</span></span><br><span class="line">    <span class="comment">// 学习（）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉（）</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li><font color="red">extands</font>的意思是“扩展”。子类是父类的扩展。</li><li>JAVA中类只有单继承，没有多继承！一个儿子只能有一个爸爸，一个爸爸可以有多个儿子。</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extends来表示。</li><li>子类和父类之间，从意义上讲应该具有“is a”的关系</li></ul><ul><li>object类</li><li>super - this</li><li>方法重写：重点 —-&gt; 多态</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_05.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">        System.out.println(student.getMoney());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生 is 人      派生类，子类</span></span><br><span class="line"><span class="comment">// 子类继承了父类，就会拥有父类的全部方法！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ctrl + H</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Java中，所有的类，都默认直接或间接继承Object</span></span><br><span class="line"><span class="comment">// Person  人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public  公有</span></span><br><span class="line">    <span class="comment">// protected 受保护的</span></span><br><span class="line">    <span class="comment">// default 默认</span></span><br><span class="line">    <span class="comment">// private 私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">1_000_000_000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">int</span> money)</span> {</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_05.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.test(<span class="string">"聂千龙"</span>);</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        student.test1();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生 is 人      派生类，子类</span></span><br><span class="line"><span class="comment">// 子类继承了父类，就会拥有父类的全部方法！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 隐藏代码：调用了父类的无参构造</span></span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造器必须在子类构造器的第一行</span></span><br><span class="line"><span class="comment">//        this("聂千龙");</span></span><br><span class="line">        System.out.println(<span class="string">"Student无参执行了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"feilong"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>{</span><br><span class="line">        System.out.println(name);   <span class="comment">//聂千龙</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name); <span class="comment">// feilong</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name); <span class="comment">// nieqianlong</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Student"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>{</span><br><span class="line">        print();</span><br><span class="line">        <span class="built_in">this</span>.print();</span><br><span class="line">        <span class="built_in">super</span>.print();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Java中，所有的类，都默认直接或间接继承Object</span></span><br><span class="line"><span class="comment">// Person  人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Person无参执行了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">"nieqianlong"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有的东西无法被继承</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"Person"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>super注意点：</p><pre><code>1、super调用父类的构造方法，必须在构造方法的第一个2、super必须只能出现在子类的方法或者构造方法中3、super和this不能同时调用构造方法</code></pre></li><li><p>VS this：</p><pre><code>代表的对象不同：    this：本身调用者这个对象    super：代表父类对象的引用前提：    this：没有继承也可以使用    super：只能在继承条件下才可以使用构造方法：    this();本类的构造    super();父类的构造！</code></pre></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_05.A;</span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_05.B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="comment">// 静态方法和非静态方法区别很大！</span></span><br><span class="line">        <span class="comment">// 静态方法： 方法的调用只和左边，定义的数据类型有关</span></span><br><span class="line">    <span class="comment">// 非静态：重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test(); <span class="comment">// A类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父类的引用指向了子类</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>(); <span class="comment">// 子类重写了父类的方法</span></span><br><span class="line">        b.test(); <span class="comment">// B类</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>{</span><br><span class="line"><span class="comment">//    public  void test(){</span></span><br><span class="line"><span class="comment">//        System.out.println("A =&gt; test()");</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Override 重写</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//注解：有功能的注释</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"A =&gt; test()"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_05;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写都是方法的重写，和属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"B =&gt; test()"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>重写：需要有继承关系，子类重写父类的方法！</p><pre><code>1、方法名必须相同2、参数列表必须相同3、修饰符：范围可以扩大    public&gt;protected&gt;default&gt;private4、抛出的异常：范围可以被缩小，但不能扩大</code></pre></li><li><p>重写，子类的方法和父类必须一致，方法体不同！</p></li><li><p>为什么需要重写：</p><pre><code>1、父类的功能，子类不一定需要，或者不一定满足！Alt + Insert : Override</code></pre></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li><p>动态编译：类型</p></li><li><p>多态即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p></li><li>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多（父类，有关系的类）</li><li>多态存在的条件：<ul><li>有继承关系</li><li>子类重写父类的方法</li><li>父类引用指向子类对象</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Person;</span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">// 可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Student 能调用的方法都是自己的或者继承父类的！</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        s2.run(); <span class="comment">// 子类重写了父类的方法，执行子类的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line">        s1.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"son"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态注意事项：</span></span><br><span class="line"><span class="comment">1、多态是方法的多态，属性没有多态</span></span><br><span class="line"><span class="comment">2、父类和子类，有联系 没有父子关系会报类型转换异常！ClassCastException!</span></span><br><span class="line"><span class="comment">3、存在条件：继承关系；方法需要重写；父类的引用指向子类对象！ Father f1 = new Son();</span></span><br><span class="line"><span class="comment">4、不能被重写的方法类型：</span></span><br><span class="line"><span class="comment">    1、static 静态方法，属于类，不属于实例</span></span><br><span class="line"><span class="comment">    2、final  常量，无法改变，在常量池；</span></span><br><span class="line"><span class="comment">    4、private 私有方法</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><ul><li>注意：多态是方法的多态，属性没有多态性</li><li><font color="red">instanceof</font>    （类型转换）-&gt; 引用类型    判断一个对象是什么类型（有没有父子类型）</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Person;</span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Student;</span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// Object &gt; String</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Teacher</span></span><br><span class="line">        <span class="comment">// Object &gt; Person &gt; Student</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// instanceof主要的作用，是为了测试左边的对象，是不是右边的类的实例</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student);  <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person);   <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);   <span class="comment">// true</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);  <span class="comment">// false</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student);  <span class="comment">// true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person);   <span class="comment">// true</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);   <span class="comment">// true</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof Teacher);  // 编译报错</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String);   // 编译报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student);  <span class="comment">// true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person);   <span class="comment">// true</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);   <span class="comment">// true</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher);  // 编译报错</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof String);   // 编译报错</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>编译能不能通过首先看X和Y的类型是否有父子（继承）关系，如果存在则可同编译，如果没有则编译报错；</li></ul><p>其次，如果X和Y的类型存在继承关系，则不会报错，此时再判断X的实际类型，是不是Y的子类，如果是便为true，</p><p>不是就是false。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Person;</span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_06.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 类型之间的转换：基本类型转换 -&gt; 高低：64 32 16 8</span></span><br><span class="line">        <span class="comment">//                       父 -&gt; 子</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 高                    低</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//        student.go(); Person类中没有go方法</span></span><br><span class="line">        <span class="comment">// 将Person类型的student对象转换为Student类型，就可以使用Student类型的方法了！</span></span><br><span class="line">        ((Student)student).go();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子类转换为父类，可能丢失自己的本来的一些方法！</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> student;</span><br><span class="line"><span class="comment">//        person.go();</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、父类引用指向子类的对象</span></span><br><span class="line"><span class="comment">2、把子类转换为父类，向上转型：强制转换 可能会丢失方法</span></span><br><span class="line"><span class="comment">3、把父类转换为子类，向下转型：自动转换</span></span><br><span class="line"><span class="comment">4、方便方法的调用，减少重复的代码！可以使代码变得更加简洁</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"go"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_07;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> age; <span class="comment">// 静态变量  多线程！</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;  <span class="comment">// 非静态变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>{</span><br><span class="line">        go();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line"></span><br><span class="line">        go();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student</span>().run();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_07;</span><br><span class="line"><span class="comment">// 如果Person使用final修饰则无法继承（final断子绝孙）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> {</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 2、代码块（匿名代码块）</span></span><br><span class="line">        <span class="comment">// 可以用来赋初始值</span></span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="comment">//1、 静态代码块（第一个执行，和类一起加载）</span></span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_07;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><font color="red">abstract</font>修饰符可以用来修饰方法也可以用来修饰类，如果修饰方法，该方法就是抽象方法；如果修饰类，那么该类就是抽象类。</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类。</li><li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的。</li><li>抽象方法：只有方法的声明，没有方法的实现，它是让子类实现的。</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_08;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> {</span><br><span class="line">    <span class="comment">// 约束-有人帮我们实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1、不能new这个抽象类，只能靠子类去实现它：约束！</span></span><br><span class="line"><span class="comment">    2、抽象类里可以写普通方法</span></span><br><span class="line"><span class="comment">    3、抽象方法必须在抽象类中</span></span><br><span class="line"><span class="comment">    抽象的抽象：就是一个约束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_08;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类的所有方法，继承了它的子类，都必须要实现它的方法-除非它的子类也是abstract（父债子偿）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Action</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>思考题：</p><ul><li>抽象类不能new，那么它存在构造器吗？</li></ul><p>答：存在构造器，子类在继承父类后，需要通过父类的构造器来实例化，所以抽象类也需要构造器</p><p><img src="https://s2.loli.net/2022/08/23/ThHqa9Lu4oP8yjU.png" alt="抽象类Action的class文件"></p><ul><li>抽象类存在的意义是什么？</li></ul><p>答：将拥有相同属性的东西抽象起来，对其自特有的则使用抽象方法，进而提高开发效率</p></li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>普通类：只有具体实现</li><li>抽象类：具体实现和规范（抽象方法）都有！</li><li>接口：只有规范！自己无法写方法 ~ 专业的约束！  约束和实现的分离：面向接口编程</li></ul><ul><li>接口就是规范，定义的是，体现了现实世界中“如果你是……则必须能……”的思想。例如：如果你是天使，则必须能飞；如果你是汽车，则必须能跑；如果你是好人，则必须干掉坏人；如果你是坏人，则必须欺负好人。</li><li><font color="red">接口的本质是契约，</font>就像我们的法律一样，制定好了大家遵守。</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口为什么我们讨论设计模式都只针对了具备了抽象能力的语言（比如C++、Java、C#等），就是因为设计模式所研究的实际上就是如何合理的去抽象。</li><li>声明类的关键字是class，声明接口的关键字是interface</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类 extends 单继承</span></span><br><span class="line"><span class="comment">// 类 可以实现接口 implements 接口 可以调用多接口</span></span><br><span class="line"><span class="comment">// 实现了接口的类，就需要重写接口的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多继承，利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>, TimeService {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_09;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface定义的关键字，接口都需要实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 常量 public static final</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口中所有定义的方法其实都是抽象的 public abstract</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>作用：<pre><code>1、约束2、定义一些方法，让不同的人实现3、public abstract4、public static final5、接口不能被实例化，接口中没有构造方法6、implement可以实现多个接口7、必须要重写接口中的方法</code></pre></li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>内部类就是在一个类的内部再定义一个类，比如：A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类对于B类来说就是外部类。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.oop.Demo_10.Outer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个项目应该只存在一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.oop.Demo_10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(<span class="string">"这是内部类方法"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得外部类的私有属性</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getID</span><span class="params">()</span>{</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Inner2</span>{</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>{</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个java类中可以有多个class类，但是只能有一个public class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Chapter-07"><a href="#Chapter-07" class="headerlink" title="Chapter 07"></a>Chapter 07</h1><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><ul><li>实际工作中，遇到的情况不可能是十分完美的。比如：你写的某个模块，用户输入不一定符合你的要求、你的程序要打开某个文件，这个文件可能不存在或者格式不对，你要读取数据库的数据，数据库可能是空的等。我们的程序在跑着，内存或者硬盘可能满了，等等。</li><li>软件程序在运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫异常，英文是：<font color="red">Exception</font>，意思是例外，这些例外情况（异常），怎么让我们写出的程序做出合理的处理，而不至于程序崩溃。</li><li>异常指程序运行过程中出现的不期而至的各种情况，如：文件找不到、网络连接失败、非法参数等。</li><li>异常发生在程序运行期间，他影响了正常的程序执行流程。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo_01</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">//        new Demo_01().a();</span></span><br><span class="line">        System.out.println(<span class="number">11</span>/<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//    public void a(){</span></span><br><span class="line"><span class="comment">//        b();</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line"><span class="comment">//    public void b(){</span></span><br><span class="line"><span class="comment">//        a();</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h3><ul><li>要理解Java异常是如何工作的，你需要掌握以下三种类型的异常：</li><li>检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常：运行时异常是可能被程序避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li>错误<font color="red">ERROR</font>：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，再编译也检查不到的。</li></ul><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><ul><li>Java把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li><li>在Java API中已经定义了许多异常类，这些异常类分为两大类，错误<font color="red">ERROR</font>和异常<font color="red">Exception</font></li></ul><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul><li>Error类对象有Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误(Virtual MachineError)，当JVM不再有执行操作所需的内存资源时，将出现<font color="red">OutOfMemoryError</font>。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul><li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul><li>ArrayIndexOutOfBoundsException（数组下标越界）</li><li>NullPointerException（空指针异常）</li><li>ArithmaticException（算术异常）</li><li>MissingResourceException（丢失资源）</li><li>ClassNotFoundException（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li></ul></li><li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</li><li>Error和Exception的区别：Error一般是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception一般情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li></ul><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><ul><li>抛出异常</li><li>捕获异常</li></ul><ul><li>异常处理五个关键字<ul><li>try、catch、finally、throw、throws</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> { <span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        }<span class="keyword">catch</span> (ArithmeticException e){ <span class="comment">// catch捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">"程序出现异常，变量b不能为0"</span>);</span><br><span class="line">        }<span class="keyword">finally</span> { <span class="comment">// 处理善后</span></span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// finally 可以不要finally，IO，资源，关闭！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> { <span class="comment">//try监控区域</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test</span>().a();</span><br><span class="line">        }<span class="keyword">catch</span> (Throwable e){ <span class="comment">// （想要捕获的异常的类型！）catch捕获异常</span></span><br><span class="line">            System.out.println(<span class="string">"程序出现异常"</span>);</span><br><span class="line">        }<span class="keyword">finally</span> {</span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设要捕获多个异常：从小到大！</span></span><br><span class="line">        <span class="keyword">try</span> { <span class="comment">//try监控区域</span></span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        }<span class="keyword">catch</span> (Error e){</span><br><span class="line">            System.out.println(<span class="string">"Error"</span>);</span><br><span class="line">        }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">            System.out.println(<span class="string">"Exception"</span>);</span><br><span class="line">        }<span class="keyword">catch</span> (Throwable t){</span><br><span class="line">            System.out.println(<span class="string">"Throwable"</span>);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span>{</span><br><span class="line">        b();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>{</span><br><span class="line">        a();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Ctrl + Alt + T</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace(); <span class="comment">//打印错误的栈信息</span></span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Test</span>().test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (ArithmeticException e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设这个方法中，处理不了这个异常，方法上抛出异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException{</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>){ <span class="comment">// 主动抛出异常 throw throws</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(); <span class="comment">// 主动抛出异常，一般在方法中使用</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul><li>使用Java内置的异常类可以描述在编程是出现的大部分异常情况。除此之外，用户还可以自定义异常，用户自定义异常，只需继承Exception即可。</li><li>在程序中使用自定义异常类，大体可分为以下几个步骤：<ul><li>1、创建自定义异常类</li><li>2、在方法中通过throw关键字抛出异常</li><li>3、如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li><li>4、在出现异常方法的调用者中捕获并处理异常。</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.exception.Demo_02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">    <span class="comment">// 可能会存在异常的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> MyException {</span><br><span class="line">        System.out.println(<span class="string">"传递的参数为："</span>+ a);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a); <span class="comment">// 抛出</span></span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"OK"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            test(<span class="number">11</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (MyException e) {</span><br><span class="line">            System.out.println(<span class="string">"MyException=&gt;"</span>+e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.nieqianlong.exception.Demo_02;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>{</span><br><span class="line">    <span class="comment">// 传递数组&gt;10抛出异常</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> detail)</span> {</span><br><span class="line">        <span class="built_in">this</span>.detail = detail;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toString：异常的打印信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyException{"</span> + detail + <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h3><ul><li>处理运行时异常时，采用逻辑去合理规避try-catch处理</li><li>在多重catch块后面，可以加上一个catch(Exception)来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch处理潜在的异常</li><li>尽量去处理异常，切忌只是简单地调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的资源</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dos命令学习</title>
      <link href="/archives/4d22d848.html"/>
      <url>/archives/4d22d848.html</url>
      
        <content type="html"><![CDATA[<h1 id="打开CMD的方式"><a href="#打开CMD的方式" class="headerlink" title="打开CMD的方式"></a>打开CMD的方式</h1><ol><li>开始 + 系统 + 命令提示符</li><li>Win键 + R 输入cmd打开控制台（推荐）</li><li>在任意文件夹下，按住shift键 + 鼠标右键，在此处打开命令窗口</li><li>资源管理器的地址导航栏前面加上cmd路径</li></ol><p>管理员方式运行：选择以管理员方式运行</p><h1 id="常用的Dos命令："><a href="#常用的Dos命令：" class="headerlink" title="常用的Dos命令："></a>常用的Dos命令：</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 盘符切换</span></span><br><span class="line">C:</span><br><span class="line">D:</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 查看当前目录下的所有文件</span></span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line">D:\&gt;<span class="built_in">dir</span> <span class="comment"># 查看D盘下所有文件</span></span><br><span class="line"><span class="comment"># 切换目录 </span></span><br><span class="line"><span class="built_in">cd</span> <span class="comment"># change directory</span></span><br><span class="line"><span class="comment">## 跨盘符</span></span><br><span class="line">E:\&gt;<span class="built_in">cd</span> /d f: <span class="comment">#在E盘下切换到F盘</span></span><br><span class="line">F:\&gt;<span class="built_in">cd</span> /d E:\IDE <span class="comment">#在F盘下切换到E盘的IDE目录</span></span><br><span class="line"><span class="comment">## 同一盘符下</span></span><br><span class="line">E:\&gt;<span class="built_in">cd</span> IDE <span class="comment"># 打开E盘吓的IDE目录</span></span><br><span class="line"><span class="comment">## 返回上一级</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># 清理屏幕</span></span><br><span class="line">cls <span class="comment"># clear screen</span></span><br><span class="line"><span class="comment"># 退出终端</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 查看电脑ip</span></span><br><span class="line">ipconfig</span><br><span class="line"><span class="comment"># 打开应用</span></span><br><span class="line"><span class="comment">##计算器</span></span><br><span class="line">calc</span><br><span class="line"><span class="comment">##画图</span></span><br><span class="line">mspaint</span><br><span class="line"><span class="comment">##记事本</span></span><br><span class="line">notpad</span><br><span class="line"><span class="comment">#ping 命令</span></span><br><span class="line">ping www.baidu.com</span><br><span class="line"><span class="comment">#文件操作命令</span></span><br><span class="line"><span class="comment">## 创建目录</span></span><br><span class="line">md 目录名</span><br><span class="line"><span class="comment">## 删除目录</span></span><br><span class="line">rd 目录名</span><br><span class="line"><span class="comment">## 创建文件</span></span><br><span class="line"><span class="built_in">cd</span>&gt; 文件名</span><br><span class="line"><span class="comment">## 删除文件</span></span><br><span class="line">del 文件名</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown测试</title>
      <link href="/archives/45babedb.html"/>
      <url>/archives/45babedb.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><p>标题：</p><h1 id="一级标题-一级标题"><a href="#一级标题-一级标题" class="headerlink" title="一级标题(#一级标题)"></a>一级标题(#一级标题)</h1><h2 id="二级标题-二级标题"><a href="#二级标题-二级标题" class="headerlink" title="二级标题(##二级标题)"></a>二级标题(##二级标题)</h2><h3 id="三级标题-三级标题"><a href="#三级标题-三级标题" class="headerlink" title="三级标题(###三级标题)"></a>三级标题(###三级标题)</h3><h4 id="四级标题-四级标题"><a href="#四级标题-四级标题" class="headerlink" title="四级标题(####四级标题)"></a>四级标题(####四级标题)</h4><p>Markdown最多支持到六级标题</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello,Word!</strong></p><p><em>Hello,Word!</em></p><p><strong><em>Hello,Word!</em></strong></p><p><del>Hello,Word!</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>该文档用于markdown学习</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><p>（—-或者<em>*</em>）</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://pic3.zhimg.com/v2-e80c8023fd727e099f5846faf5435eac_1440w.jpg?source=172ae18b" alt="图片测试1"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a68314308cc0cd101bfc44abb176dd10.png" alt="图片测试2"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p><a href="(https://www.nieqianlong.cn/">点击跳转到我的博客</a>)</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol><li>A</li><li>B</li><li>C</li></ol><ul><li>A</li><li>B</li><li>C</li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>名字</th><th>性别</th><th>生日</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>1994.1.1</td><td></td></tr></tbody></table></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的博客搭建历程</title>
      <link href="/archives/4d8c90f.html"/>
      <url>/archives/4d8c90f.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 我的日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
